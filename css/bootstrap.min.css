,0,0,0,0,0,367,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2054,408,410,0,0,367,375,0,69632,73728,0,0,0,0,426,65536,0,0,0,0,556,2551,556,556,556,556,556,556,556,556,556,556,2271,556,556,556,556,556,426,426,0,426,0,410,426,449,0,0,0,0,0,0,0,0,534,556,534,556,534,534,556,534,367,0,0,395,0,0,0,0,0,350,0,0,367,0,0,395,0,408,0,490,490,0,490,490,490,490,490,490,490,490,516,516,516,516,449,449,449,449,524,449,449,525,449,516,530,516,516,516,530,516,516,516,516,532,550,573,550,573,550,550,573,550,597,573,573,573,573,573,573,573,597,597,597,550,597,597,597,597,597,597,597,573,573,611,616,597,616,622,1,12290,0,0,636,0,0,0,0,0,0,0,0,0,0,0,0,0,1567,1568,0,789,0,0,0,0,534,834,534,534,534,534,534,534,863,865,534,534,534,534,534,1790,1792,534,534,534,534,534,1341,0,556,556,0,580,580,580,983,987,580,580,580,580,580,580,1013,580,556,556,556,556,936,938,556,556,556,556,556,556,556,556,556,556,2829,556,556,2832,556,556,78114,1066,0,0,0,0,0,0,0,0,0,0,0,1083,0,0,0,0,0,1234,0,0,0,0,0,0,0,0,0,0,0,2050,0,0,0,0,1085,0,0,0,0,0,0,0,0,0,0,0,0,1098,0,0,0,0,0,1235,0,0,0,0,0,0,0,0,0,0,0,122880,0,0,0,0,0,0,1116,0,0,0,0,0,0,0,0,0,0,0,0,0,1581,1582,0,0,0,0,1085,1208,0,0,0,0,0,0,1215,0,0,0,0,0,0,347,348,349,0,0,0,0,0,0,0,0,282624,282624,282624,282624,282624,282624,282624,282624,282624,0,0,0,1220,0,0,0,0,0,0,0,0,0,0,1220,1229,534,534,534,1259,534,534,534,1263,534,534,1274,534,534,1278,534,534,534,534,534,534,3001,534,534,534,534,534,534,534,534,534,1327,534,534,534,534,534,534,534,1299,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2497,534,534,534,534,1341,901,556,556,556,556,556,556,556,1351,556,556,556,556,556,1423,556,556,556,1430,556,556,26009,1341,975,580,1355,556,556,1366,556,556,1370,556,556,556,556,556,556,556,556,556,2828,556,556,556,556,556,556,1462,580,580,580,580,580,580,580,580,580,580,580,580,580,580,580,3315,580,1479,580,580,580,1483,580,580,580,580,580,580,580,580,580,580,580,2877,580,580,580,580,0,1571,1572,0,0,0,0,0,0,0,0,0,0,0,0,0,1612,0,0,0,0,0,0,1603,0,0,0,0,0,0,0,0,0,0,0,364,364,364,0,696,0,1616,0,1618,0,0,0,1622,0,0,0,1626,0,0,0,1630,0,0,0,0,1572,0,0,0,0,0,0,0,0,0,0,0,364,364,364,695,0,534,534,534,1724,534,534,534,534,534,534,534,534,534,534,534,534,1782,1783,534,534,556,1837,556,556,556,556,556,556,556,556,556,556,556,556,556,556,1818,556,556,556,556,1889,556,556,556,556,26009,0,580,580,580,580,580,580,1976,580,580,580,580,580,1981,580,580,580,0,0,0,2031,0,2032,0,0,0,0,0,0,0,0,0,0,0,2200246,151552,2200246,0,0,2175,534,534,534,534,534,534,534,534,534,534,534,2186,534,534,534,534,534,534,1758,534,534,534,534,1764,534,534,534,534,0,0,556,556,556,556,2814,556,556,556,556,556,0,0,0,0,580,2301,580,580,580,580,580,1038,580,580,580,580,0,0,0,534,580,556,580,580,2394,2395,0,1544,0,1550,0,1556,0,1562,0,0,0,0,0,0,374,0,0,0,0,0,0,0,359,0,0,0,0,0,0,0,0,0,0,0,0,0,2052,0,0,2476,0,0,0,0,0,0,0,0,0,2482,0,0,0,0,0,0,0,69632,73728,0,0,0,345,344,65536,343,534,534,534,534,2530,534,534,534,534,534,534,534,534,534,534,534,1275,534,534,534,534,580,2661,580,580,580,580,580,580,580,580,580,580,580,580,580,580,3075,580,580,0,0,2722,0,0,0,0,0,0,0,0,0,0,0,0,0,1665,0,0,534,2797,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2511,534,556,556,2845,556,556,556,556,556,556,556,556,556,556,556,556,556,2259,556,556,0,0,2970,0,0,0,0,0,0,0,0,534,534,534,534,534,534,855,534,534,534,534,0,0,0,0,3122,3123,0,0,0,0,0,0,0,0,0,0,0,2424832,2433024,0,0,2457600,3149,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,1737,3172,534,534,534,534,534,534,534,534,556,556,556,556,556,556,556,2242,556,556,556,556,556,556,556,556,1406,556,556,556,556,556,556,556,580,580,580,3229,580,580,580,580,580,580,580,580,580,534,580,556,556,556,556,580,580,580,580,3426,580,580,580,580,580,580,580,2639,580,580,580,580,580,580,580,580,580,2344,580,580,580,580,580,580,534,3236,556,3238,580,3240,3241,0,0,0,0,3245,0,0,0,0,0,0,640,0,0,0,0,0,0,0,0,0,323,397,0,0,0,323,0,0,0,3258,0,0,0,0,0,0,0,0,3261,0,534,534,534,534,534,534,534,3154,3155,534,534,534,534,3159,3160,3263,534,534,534,3266,534,534,534,534,534,534,534,534,534,534,534,1330,534,534,534,534,580,580,3318,534,3319,556,3320,580,0,0,0,0,0,0,0,0,543,566,543,566,543,543,566,543,556,556,3543,556,3544,556,556,556,556,556,556,556,556,580,580,3551,580,3552,580,580,580,580,580,580,580,580,0,0,0,0,534,534,3536,534,3537,534,534,534,534,534,534,534,1730,534,534,534,534,534,534,534,534,534,2183,534,534,534,534,534,534,409,355,0,0,0,0,0,69632,73728,0,0,0,0,0,65536,0,0,0,0,638,0,0,641,642,0,0,0,0,0,0,0,0,1591,0,0,1594,0,0,0,0,466,477,466,0,0,466,0,0,0,0,0,0,0,0,517,517,521,521,521,521,466,466,466,466,466,466,466,471,466,521,517,521,521,517,521,521,521,521,533,551,574,551,574,551,551,574,551,598,574,574,574,574,574,574,574,598,598,598,551,598,598,598,598,598,598,598,574,574,612,617,598,617,623,1,12290,0,0,731,0,0,0,637,731,0,737,738,637,0,0,0,0,0,0,656,0,0,659,660,0,0,0,0,0,0,0,2754,0,0,0,0,0,0,0,0,0,2420,0,0,0,0,0,0,777,0,0,0,0,0,0,0,0,0,0,786,0,791,0,0,0,0,0,1575,0,0,0,0,0,0,0,0,0,0,303,303,0,0,0,0,0,0,0,0,791,0,0,0,0,0,0,791,0,0,0,0,0,0,672,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2016,0,0,0,0,806,0,0,0,0,0,637,0,0,0,0,0,0,0,69632,73728,0,0,0,349,347,65536,0,0,0,0,777,0,0,0,0,0,0,0,777,777,0,637,0,0,0,786,0,791,0,777,0,806,0,0,0,658,0,777,791,829,0,534,835,534,534,534,534,854,858,864,534,869,556,556,927,931,937,556,942,556,556,556,556,556,959,556,556,556,556,556,1424,556,556,556,556,556,556,26009,1341,975,580,534,534,886,534,534,556,556,959,556,556,0,580,580,1033,580,580,580,580,1033,580,580,580,580,580,0,0,0,534,580,556,0,1086,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2449,0,0,0,0,1103,0,0,0,0,0,0,0,0,0,0,0,1113,0,0,0,1117,1118,0,0,0,0,0,0,0,0,0,0,0,364,364,208896,0,0,0,0,0,0,1179,0,1182,0,0,0,0,0,1187,0,0,0,0,0,0,2726,0,0,0,0,0,0,0,0,0,0,784,0,0,0,0,0,0,0,0,1205,0,0,1086,0,0,0,1211,0,1213,0,0,0,0,0,0,0,1638,0,0,0,0,0,0,0,0,0,1123,0,0,0,0,0,0,0,0,0,1221,0,0,0,0,0,0,0,0,0,0,1227,0,0,0,0,654,0,0,0,0,0,0,0,0,0,0,0,0,2964,2965,0,0,1230,1187,0,1211,1233,0,1236,0,0,0,0,0,1117,0,0,0,0,0,0,2739,0,0,0,0,2744,0,0,0,0,0,0,299,0,0,0,303,2424832,2433024,0,0,2457600,0,1245,0,0,0,0,0,1245,0,0,1136,1245,0,1252,534,534,534,534,534,534,3279,534,556,556,556,556,556,556,556,556,556,556,3514,556,556,556,580,534,534,1258,534,534,534,534,1264,534,534,534,534,534,534,534,534,534,3455,534,534,3457,556,556,556,534,534,1285,534,534,534,534,534,534,534,534,534,534,1296,534,534,534,534,534,534,3341,534,534,534,534,534,534,534,534,556,580,3607,3608,3609,534,556,580,534,556,580,0,0,0,0,0,0,333,0,0,333,0,0,333,0,0,0,534,534,1301,534,534,534,534,534,534,534,534,1308,534,534,534,1315,1317,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2149,534,1339,534,1341,901,1343,556,556,556,556,556,1350,556,556,556,556,556,556,2225,556,556,556,556,556,556,556,556,556,2244,556,556,556,556,2248,556,1356,556,556,556,556,556,556,556,556,556,556,1377,556,556,556,556,556,556,2241,556,2243,556,556,556,556,556,556,556,1425,556,556,556,556,556,26009,1341,975,580,556,556,556,556,1400,556,556,556,1407,1409,556,556,556,556,556,556,1386,556,556,556,556,556,556,556,1395,556,1480,580,580,580,580,1485,580,580,580,580,580,580,580,580,1492,580,580,580,580,2352,580,580,580,580,580,580,580,580,580,580,580,2628,580,580,580,580,580,580,1499,1501,580,580,580,580,580,580,580,580,580,580,580,580,2878,580,580,2881,1550,0,0,0,1556,0,0,0,1562,0,0,0,0,0,0,0,0,2957312,0,0,0,0,0,0,0,0,1150,0,0,0,0,0,0,0,0,1166,0,0,0,0,0,0,0,0,1179,0,0,0,0,0,0,0,0,0,0,0,0,2094,0,0,0,1573,1574,0,0,0,0,0,1580,0,0,0,0,0,0,0,69632,73728,0,0,0,373,0,65536,0,0,0,1601,0,0,0,0,0,0,0,0,0,0,0,0,0,1677,0,0,0,0,0,0,1619,0,0,0,0,0,0,0,1627,1628,0,0,0,0,0,1604,0,0,0,0,0,0,0,0,0,0,0,254407,0,0,0,0,0,0,0,0,1635,0,0,0,0,0,0,0,0,0,0,0,382,0,0,0,386,0,0,0,1685,0,0,0,0,0,1689,0,0,1692,0,0,0,0,0,0,3143,0,0,0,0,0,0,0,0,0,0,2756,0,0,2759,0,0,0,0,0,0,1689,0,0,0,0,0,0,0,0,0,0,1705,0,1707,1681,534,534,534,534,534,534,534,534,534,534,534,1719,534,534,534,534,534,1791,534,534,534,534,534,534,1341,0,556,556,556,556,556,2295,0,0,0,580,580,580,580,580,580,580,2666,580,580,580,580,580,580,580,580,580,1446,580,580,580,580,580,580,534,534,534,1725,534,534,534,534,534,534,534,534,534,534,1736,534,534,534,534,534,2179,534,534,534,534,534,534,534,534,534,534,2143,534,2145,534,534,534,534,534,534,1740,534,534,534,534,534,534,534,534,534,534,1751,534,534,534,534,534,2207,0,0,0,556,556,556,556,556,556,556,1403,556,556,556,556,556,556,556,556,1408,556,556,556,556,556,556,556,534,534,1756,534,534,534,534,534,534,534,534,534,534,534,534,534,2172,534,534,2002,580,580,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,696,0,0,2019,2020,0,0,0,0,0,0,0,0,0,0,0,0,662,0,0,0,2055,2056,0,0,2058,2059,0,0,0,0,0,0,0,0,0,0,0,2617344,0,0,0,0,2081,0,0,0,0,2084,2085,0,0,0,0,0,2091,0,0,0,0,0,0,3259,0,0,0,0,0,0,534,534,534,534,534,849,534,534,534,534,534,534,534,2152,534,534,534,534,534,534,534,534,534,534,2161,534,534,534,534,534,534,3452,534,3454,534,534,3456,534,556,556,556,556,3509,556,556,556,556,556,556,556,556,556,580,580,580,580,580,580,0,0,0,3595,534,534,2164,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2174,534,534,534,2191,534,534,534,2194,534,534,534,534,2199,534,534,534,534,534,534,1759,534,534,534,534,534,534,534,534,534,1732,534,534,534,534,534,534,556,2237,556,556,556,556,556,556,556,556,556,556,2246,556,556,2249,556,556,2277,556,556,556,556,2281,556,556,556,556,2286,556,556,556,556,556,1808,556,556,556,556,556,556,556,556,556,556,2608,556,556,556,556,556,580,2324,580,580,580,580,580,580,580,580,580,580,2333,580,580,2336,580,580,2364,580,580,580,580,2368,580,580,580,580,2373,580,580,580,580,580,2665,580,580,580,580,580,580,580,580,580,580,1979,580,580,580,580,580,2398,0,0,0,0,0,0,0,0,0,0,2408,0,0,0,0,0,0,687,0,0,0,770,0,0,0,0,789,0,0,0,0,0,0,0,0,0,0,176128,176128,176128,176128,176128,176128,176128,176128,534,534,2488,534,534,534,534,534,534,534,534,534,534,2496,534,534,534,534,534,882,534,534,534,534,534,556,556,556,556,556,3411,556,556,556,3415,556,556,534,534,2514,534,534,2516,534,2517,534,534,534,534,534,534,534,2524,534,534,2528,534,534,534,534,534,534,534,534,534,534,534,534,2539,556,556,2560,556,556,556,556,556,556,556,556,556,556,556,556,556,3472,580,580,556,556,556,2575,556,556,556,2578,556,556,2580,556,2581,556,556,556,556,556,1827,556,556,556,556,556,556,556,556,556,556,1814,556,556,556,556,1820,580,2646,580,2647,580,580,580,580,580,580,580,580,2655,580,580,2659,0,2696,2697,0,0,2700,2701,0,0,0,0,0,0,0,0,0,0,3178496,2670592,0,2744320,0,0,2772,534,2775,534,534,534,534,2780,534,534,534,2783,534,534,534,534,534,534,534,3002,3003,534,534,534,534,534,534,534,534,2494,534,534,534,534,534,534,534,534,1744,534,534,534,1748,534,534,1753,2808,534,534,534,0,0,556,556,556,556,556,556,556,556,556,556,3358,556,556,556,556,556,2819,556,2822,556,556,556,556,2827,556,556,556,2830,556,556,556,556,556,556,2255,556,556,556,556,556,556,556,556,556,2228,556,2230,556,556,556,556,556,556,2857,556,556,556,0,0,580,580,580,580,580,580,580,580,2652,580,580,580,580,580,580,580,580,580,2868,580,2871,580,580,580,580,2876,580,580,580,2879,580,580,580,580,1034,580,580,580,580,580,0,0,0,534,580,556,580,580,580,580,2906,580,580,580,534,580,556,534,534,556,556,580,580,0,0,3112,0,3114,0,0,0,3118,0,0,534,534,534,534,3013,534,534,534,534,534,556,556,556,3021,556,556,556,556,556,2266,2267,556,556,556,556,556,556,2274,556,556,0,580,580,580,580,580,580,994,580,580,1008,580,580,580,580,580,2341,580,580,580,580,580,580,580,580,580,580,0,0,733,534,580,556,0,0,3121,0,0,0,0,0,0,0,0,0,0,0,0,0,1693,0,0,534,3173,534,534,534,534,534,534,534,556,556,556,556,556,556,556,2839,556,556,556,556,556,556,556,556,1811,556,556,556,556,556,556,556,556,556,3183,556,556,556,556,556,556,556,556,556,556,556,556,556,3033,556,556,556,556,3193,556,556,556,556,556,556,3199,556,3201,556,556,556,556,556,0,0,0,0,580,580,580,2303,580,2305,580,580,580,3228,580,3230,580,580,580,580,580,580,580,580,534,580,556,556,556,556,580,3423,580,3425,580,580,580,580,580,580,580,580,580,2888,580,580,580,580,580,580,0,0,0,3248,0,0,0,0,0,0,0,3132,0,0,0,0,0,0,0,0,0,3334,534,534,0,3257,0,0,0,0,0,0,0,0,0,0,0,534,534,534,534,2982,534,534,3264,534,534,534,3268,534,534,534,534,534,534,534,534,534,1328,534,534,534,534,534,534,534,534,534,534,3277,534,534,534,556,556,556,556,556,3282,556,556,556,556,556,2294,0,0,0,580,580,580,580,580,580,580,580,3482,580,580,3484,580,0,0,0,556,3286,556,556,556,556,556,556,556,556,556,556,556,556,556,556,1883,556,3295,556,556,556,556,580,580,580,580,580,3301,580,580,580,3305,580,580,580,580,2380,534,580,556,534,534,534,534,556,556,556,556,580,580,580,580,0,534,3601,556,3602,580,3603,3489,0,0,0,534,534,534,3496,534,534,534,534,534,534,534,534,1265,534,534,534,534,534,534,534,3504,556,556,556,3508,556,556,556,556,556,556,556,556,3516,556,580,580,580,580,2624,580,580,580,580,580,580,580,580,580,580,580,1475,580,580,580,580,580,580,3521,580,580,580,580,580,580,580,580,3529,580,0,0,0,0,0,0,122880,122880,122880,122880,122880,0,122880,0,2105631,12290,0,3532,0,3534,534,534,534,534,534,534,534,534,534,3540,3541,534,534,534,534,534,2208,0,0,0,556,556,556,556,556,556,556,1387,556,556,556,1391,556,556,556,556,556,357,358,0,0,0,0,0,0,0,364,0,292,0,0,0,0,0,0,688,0,0,0,0,364,364,364,0,0,0,0,0,391,0,0,0,0,0,0,0,0,0,0,0,0,722,0,735,654,467,467,481,0,0,481,358,358,358,503,358,358,358,358,467,467,599,575,575,575,575,575,575,575,599,599,599,552,599,599,599,599,599,599,599,575,575,552,575,599,575,599,1,12290,556,556,928,556,556,556,556,556,556,556,556,556,556,964,556,556,556,556,556,2294,2615,0,0,0,0,580,580,580,580,580,534,556,580,0,0,0,0,0,0,0,0,2924,0,0,0,0,0,0,534,534,534,891,534,556,556,556,964,556,0,580,580,580,1038,580,580,580,580,2636,580,2638,580,580,580,580,2642,580,580,580,580,0,0,0,3440,0,0,0,3443,0,0,534,534,78114,1066,0,0,0,0,0,0,0,0,0,0,0,0,1084,0,0,0,0,670,0,0,0,0,0,0,0,0,0,0,0,0,2432,0,0,0,1184,0,0,0,0,0,0,0,0,0,0,0,0,534,534,534,2132,2133,534,534,1340,1341,901,556,556,556,556,556,556,556,556,556,1353,556,556,556,556,580,3590,580,580,580,580,0,0,0,534,534,534,534,534,534,1713,534,534,534,534,534,534,534,2140,534,534,534,534,534,534,534,534,534,2990,534,534,534,534,534,534,556,556,1362,556,556,556,556,556,556,556,556,556,556,556,556,556,3047,556,556,556,0,1551,0,0,0,1557,0,0,0,1563,0,0,0,0,0,0,0,1650,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172032,0,1656,0,0,0,0,0,0,0,0,1662,0,1664,0,0,0,0,0,0,172032,172032,172032,172032,172032,172032,172032,172032,1,12290,534,534,1771,534,534,534,534,534,534,534,534,534,534,534,534,534,2523,534,534,556,556,1854,556,556,556,556,556,556,556,556,556,556,556,1866,556,556,556,556,932,556,556,556,556,556,556,556,556,556,556,556,1815,556,556,556,556,556,1887,556,556,556,556,556,556,26009,0,580,580,580,580,580,580,2312,580,580,580,580,580,580,580,580,580,1488,580,580,580,580,580,580,580,580,580,1924,580,580,580,580,580,580,580,580,580,580,580,580,3073,580,580,580,580,580,1937,580,580,580,580,580,580,580,580,580,580,580,1950,580,580,580,580,2648,580,580,580,580,580,580,580,580,2656,580,580,580,580,580,3231,580,580,580,580,580,580,580,534,580,556,580,580,580,1973,580,580,580,580,580,580,580,580,580,1983,580,580,580,580,1484,580,580,580,580,580,580,580,580,580,580,580,3222,580,580,580,580,0,0,0,2043,0,0,0,0,0,0,0,0,0,0,0,0,733,1171,0,0,534,2151,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2795,534,2236,556,556,556,556,556,556,556,556,556,556,556,556,556,556,556,2600,2323,580,580,580,580,580,580,580,580,580,580,580,580,580,580,580,3089,580,580,580,580,2622,580,580,580,580,580,580,580,580,580,580,580,580,580,3224,580,580,2695,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2120,2734,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2719,534,2774,534,2776,534,534,534,534,534,534,534,534,534,534,534,534,2160,534,534,534,556,2821,556,2823,556,556,556,556,556,556,556,556,556,556,556,556,3190,556,556,556,580,580,580,2870,580,2872,580,580,580,580,580,580,580,580,580,580,2654,580,580,580,580,580,0,0,0,0,2933,0,0,0,0,0,0,0,0,0,0,0,534,534,534,2981,534,556,556,556,556,3289,556,556,556,556,556,556,556,556,556,556,556,3202,556,556,556,556,580,3308,580,580,580,580,580,580,580,580,580,580,580,580,580,580,3314,580,580,556,556,3589,556,580,580,580,580,3593,580,0,0,0,534,534,534,3152,534,534,534,534,534,534,534,3157,534,534,534,0,0,359,0,0,0,0,0,0,364,0,292,0,0,0,0,0,0,702,0,0,0,0,0,0,0,0,0,0,2600960,0,0,2768896,2777088,2781184,0,0,369,0,0,369,0,0,0,0,0,0,0,0,0,0,0,0,0,2040,2041,0,600,576,576,576,576,576,576,576,600,600,600,553,600,600,600,600,600,600,600,576,576,553,576,600,576,600,1,12290,556,923,556,556,556,556,556,556,556,556,556,556,556,556,556,556,2234,556,556,556,556,556,1367,556,556,556,556,556,556,556,556,556,556,556,3547,3548,556,556,580,580,580,580,580,1500,580,580,580,580,580,580,580,580,580,580,580,580,580,3102,3103,3104,534,1646,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2748,0,0,1684,0,0,0,0,0,0,0,0,0,0,0,0,0,2065,0,0,580,580,580,1938,580,580,580,580,580,580,580,580,580,580,580,580,3223,580,580,580,0,0,0,2723,0,0,0,0,0,0,0,0,0,0,0,0,734,0,0,0,2942,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2760,0,0,0,0,3249,0,3250,0,0,0,0,3132,0,0,0,0,0,0,0,3333,0,534,534,534,0,0,0,360,361,362,363,0,0,364,0,292,0,0,0,0,0,0,718,0,0,0,0,0,0,0,0,0,0,2445,0,0,0,0,0,0,361,0,360,0,0,0,69632,73728,0,0,0,0,427,65536,0,0,0,0,685,534,534,838,842,845,534,853,534,534,534,868,427,427,0,427,0,361,427,450,0,0,0,0,0,0,0,0,690,691,0,364,364,364,0,0,0,0,0,491,491,0,498,498,498,498,504,505,498,498,518,518,518,518,450,450,450,450,450,450,450,450,450,518,518,518,518,518,518,518,518,554,577,554,577,554,554,577,554,601,577,577,577,577,577,577,577,601,601,601,554,601,601,601,601,601,601,601,577,577,613,618,601,618,624,1,12290,534,534,887,534,534,556,556,960,556,556,0,580,580,1034,580,580,580,580,1502,580,580,580,580,580,580,580,580,580,580,580,2332,580,580,580,580,534,2513,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2806,534,534,534,534,2542,534,534,534,534,534,534,534,534,534,534,0,0,0,0,556,556,556,2216,556,2218,556,580,2674,580,580,580,580,580,580,580,580,580,580,534,580,556,534,534,534,534,534,2491,534,534,534,534,2495,534,534,534,534,534,0,0,0,0,556,556,2215,556,556,556,556,602,578,578,578,578,578,578,578,602,602,602,555,602,602,602,602,602,602,602,578,578,555,578,602,578,602,1,12290,0,0,698,0,0,0,0,0,0,0,0,0,0,0,0,0,2410,0,0,728,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2952,0,0,0,728,0,784,0,0,0,0,0,0,0,0,784,0,0,0,0,686,0,0,0,0,0,0,364,364,364,0,0,0,0,0,671,0,0,0,0,0,0,0,0,0,0,0,3145,3146,0,0,0,556,924,556,556,556,556,556,556,556,556,556,556,556,556,556,556,2260,2261,0,0,1176,0,0,0,0,0,0,0,0,0,0,0,0,0,2433,0,0,534,1300,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2548,0,0,1418,556,556,556,556,556,556,556,556,556,556,556,26009,1341,975,580,580,580,580,2664,580,580,580,580,2668,580,580,580,580,580,580,1505,580,580,1509,580,580,580,580,580,1515,0,0,1553,0,0,0,1559,0,0,0,0,0,0,0,0,0,299,0,0,0,0,0,0,0,0,0,2082,0,0,0,0,0,0,0,0,0,0,0,0,736,0,0,0,0,0,0,0,534,534,534,534,2167,534,534,534,534,534,534,534,534,534,534,534,1733,534,534,534,534,556,556,556,2252,556,556,556,556,556,556,556,556,556,556,556,556,3471,580,580,580,580,580,580,2339,580,580,580,580,580,580,580,580,580,580,580,580,3485,0,0,3488,2499,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2202,0,0,0,0,736,534,534,534,534,534,534,534,534,534,534,534,1747,534,534,534,534,1051,534,534,892,534,1056,556,556,965,556,0,1061,580,580,1039,580,580,580,580,2885,580,580,580,580,580,580,580,580,580,580,580,2680,534,580,556,534,556,556,1420,556,556,556,556,556,556,556,556,556,26009,1341,975,580,580,580,580,2894,580,580,580,580,580,580,580,580,580,580,580,2900,580,580,580,580,534,534,534,534,1726,534,534,534,534,534,534,534,534,534,534,534,2144,534,534,2148,534,1821,556,556,556,556,556,556,556,556,556,556,556,556,556,556,556,2843,580,580,1954,580,580,580,580,580,580,580,580,580,580,580,580,580,3313,580,580,580,580,556,2586,556,556,556,556,556,556,556,556,556,556,556,556,556,556,2288,556,556,556,556,556,2614,0,0,0,0,0,0,580,580,580,580,580,1039,580,580,580,580,0,0,0,534,580,556,0,0,0,0,2957,0,0,0,0,0,0,0,0,0,0,0,534,2979,534,534,534,2983,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,2498,3065,580,580,580,580,580,580,580,580,580,580,580,580,580,580,580,2889,580,580,580,580,580,3192,556,556,556,556,556,556,556,556,556,556,556,556,556,556,556,3035,1134592,0,1134592,0,0,0,1134592,1135007,1135007,0,0,0,0,0,1135007,0,0,0,0,700,701,0,0,0,0,0,707,0,0,0,711,0,1134592,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2718,0,0,1134592,1134592,0,0,0,0,1135196,1135196,1135196,1135196,1134592,1135196,1135196,1135196,1135196,1135196,1135196,0,1134592,1134592,1134592,1134592,1135196,1134592,1135196,1,12290,2125824,3117056,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2125824,0,0,0,2125824,2125824,2125824,2125824,3137536,2940928,2940928,2940928,0,0,0,0,0,2748416,2879488,0,0,0,0,0,2113,0,0,0,2113,0,0,2118,2119,0,0,0,0,0,1180,0,0,0,1184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2474,0,1147348,1147348,1147348,451,451,1147348,451,451,451,451,451,451,451,451,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,1147399,0,0,0,0,0,0,0,0,768,0,0,0,0,0,0,0,451,0,0,0,0,0,1147348,1147348,1147348,1147399,1147399,1147348,1147399,1147399,1,12290,3,0,0,0,0,0,253952,0,0,0,253952,0,0,0,0,0,0,0,0,0,0,0,0,0,2950,0,0,0,0,1159168,0,1159168,1159168,0,1159168,1159168,0,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,0,0,0,0,0,0,0,0,781,0,0,0,0,0,792,0,0,1159168,0,0,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1159168,1,12290,3,0,0,0,0,249856,0,0,0,249856,0,0,0,0,0,0,0,69632,73728,163840,0,0,0,0,65536,0,2125824,3117056,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2125824,0,0,974,2125824,2125824,2125824,2125824,3149824,2125824,2428928,2437120,2125824,2486272,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2125824,2625536,2125824,2125824,2125824,2125824,2125824,2125824,2699264,2125824,2715648,2125824,2723840,2125824,0,106496,106496,0,106496,106496,106496,106496,106496,106496,106496,106496,106496,106496,106496,106496,106496,106496,106496,106496,0,0,106496,0,0,106496,106496,106496,106496,106496,106496,106496,106496,106496,0,0,0,0,0,0,0,0,0,0,0,2183168,0,0,0,0,0,0,0,0,2134016,0,0,0,0,0,0,0,0,0,0,0,695,0,0,0,0,0,3108864,3198976,0,0,3043328,0,3149824,2936832,0,2760704,0,0,0,0,0,0,0,69632,73728,0,369,369,0,0,65536,369],r.EXPECTED=[127,143,342,950,172,201,188,217,769,963,247,263,279,295,311,327,1395,373,1083,374,374,374,374,374,374,374,374,374,419,391,407,466,435,589,1682,909,574,156,1220,451,495,511,527,543,559,634,1096,678,694,755,649,785,801,817,833,849,865,881,897,937,979,995,1023,1039,1055,479,1112,1128,1473,1144,1160,1206,1236,357,662,1266,709,1282,1292,1308,1324,1339,1355,1411,1427,1443,618,1459,724,1489,604,1518,1528,231,1070,1544,1560,1576,1592,1622,1250,1638,1654,1606,921,1670,739,1698,1714,1820,1190,1730,1746,1502,1758,1774,1790,1806,1175,1850,1860,1836,1009,1370,1876,1385,375,1892,1896,1903,1903,1903,1898,1902,1903,1910,1907,1914,1918,1922,1926,1929,1933,1937,1941,1945,4040,4040,4040,4106,4040,4040,2020,2279,4040,1949,4040,4040,4040,2429,2379,4040,4040,4040,4040,2438,4040,4040,3112,2651,3443,2444,1955,1984,1994,1998,4040,4040,4040,4040,4040,2017,2042,4040,4040,4040,2024,2285,2030,2034,4040,4040,4040,4040,4040,2041,4040,4040,3002,2285,2285,2285,2285,2285,2111,1988,1988,1988,1988,1988,1990,1955,1955,1955,1955,1955,2101,3099,1988,1988,1988,1988,1988,2120,1955,1955,1955,1955,1955,2046,2055,4040,4040,2212,2349,4040,4040,4040,4137,3441,4040,4040,4040,4040,3531,4040,2745,1988,1988,1988,2066,1955,1955,1955,1957,2073,4040,4040,2473,3002,2285,2285,2026,1988,1988,3101,1955,1955,1956,2072,4040,2471,4040,2284,2285,3098,1988,1988,2078,1955,2068,2129,2446,3554,2285,2112,1988,2120,1955,2083,2281,2286,1988,2067,2089,2095,2113,2049,2107,3097,2114,2079,3096,3100,2079,3096,2114,2051,2118,2126,2135,2139,2143,2156,2160,2170,2170,2170,2163,2167,2170,2173,2177,2181,2185,2189,2193,2197,2201,2205,2209,2216,4040,4040,4040,2131,4040,4040,4040,2220,4040,2226,4040,2283,2287,1988,1954,2122,2098,1961,4040,4040,4040,1970,4040,2474,1980,4040,2321,3139,4040,2440,3145,4427,2277,3219,2796,3151,3505,3155,4040,3263,3161,2906,4040,4040,4040,4040,4040,4040,4040,4040,4040,4040,4040,4040,4040,4040,4040,4040,4041,2255,2259,2262,2266,2270,2274,3465,2291,4040,4040,4040,4040,3213,2296,2312,2303,2396,2240,2243,2309,2316,2320,2649,4006,4040,2726,2326,3670,4040,4040,4040,4040,2231,3466,4040,4040,4040,3429,2237,4040,2618,3123,2249,2253,3877,2348,4040,4040,4013,2355,4040,2359,4040,4040,4040,4040,3173,2321,2227,2367,3192,4040,4040,2459,4040,4040,3192,4040,4040,4348,2989,2882,2918,3129,2349,4040,3014,2311,2670,2331,3577,4417,2336,2379,4040,4040,2549,2340,4040,4040,4040,2984,4040,4040,4040,4040,3591,2979,4040,4040,4040,3390,4180,4419,3131,4040,3190,3194,4040,2950,2989,2918,3210,4040,2469,2788,3212,4040,4005,3283,3279,4282,4040,3281,4226,4226,2601,4283,3283,3283,1966,3282,3279,1966,4227,3283,4191,2462,2478,4040,4040,4040,4040,2588,2522,4040,4040,4040,2007,2858,2484,3025,2492,2495,2498,2502,2503,2507,2511,2515,4040,2521,4040,4040,2526,4040,3968,2913,2541,2545,3867,2553,2563,2574,2578,4040,3387,3385,4040,2582,4040,3458,2587,4040,3120,4040,4040,4040,3174,2074,2409,2537,2432,4040,4040,4040,2536,2416,4040,2373,2377,4040,4040,4040,4040,4255,2378,4040,4040,4040,4040,4256,2379,4040,2838,3503,4040,4040,4040,4040,2839,3504,3974,3509,4040,4040,3730,3536,4040,3349,2906,4040,3326,2556,3181,3383,3394,3403,4040,4397,4040,3553,3551,3545,4040,2668,2912,3478,3399,2548,2592,3456,3471,2600,4040,4040,4040,4242,4040,3147,4040,3818,4040,4037,3923,3990,3561,4003,4040,2655,4039,4040,4040,4040,3167,4040,4040,4040,3331,3171,4040,4040,4040,4040,3632,3179,4040,2638,2611,2615,4040,2388,2622,4040,4040,4040,4040,2389,2349,4040,4040,4040,2397,2390,4040,4040,4040,3141,4040,4040,3846,4040,4040,2630,2517,4070,2637,2412,2989,4040,4040,4040,4040,2344,4040,4040,4040,4040,4040,3269,2989,2380,3207,4040,3463,4040,4040,4040,3861,3470,4040,4040,4040,3475,4040,3482,4040,4040,2631,3905,4040,4040,4040,4040,2631,3905,2424,3909,4040,2152,2595,3785,3915,2631,4365,2642,4040,4040,4040,4040,4085,2646,4040,4040,4040,4040,4085,2646,4040,4040,2464,4040,4040,2285,2285,2285,2285,2025,1988,1988,1988,1988,1988,2120,3610,3833,4040,4040,4040,4365,2656,4040,4040,4040,2660,2665,3980,2516,3196,2674,2678,3830,2685,4040,4040,3830,2685,4040,4040,2299,2690,4040,3184,3458,2004,3969,3197,3312,3251,2696,4040,2037,2690,4040,3251,2696,4040,2702,2709,3195,4e3,2713,2717,4040,2715,4040,2679,2723,4040,2730,2734,2739,3644,4040,2705,2583,3646,2583,2749,2753,2704,3203,2944,2566,2570,2956,2945,3843,2568,2568,2761,3815,3641,2765,3607,2769,2773,2775,2779,2783,2787,4040,4040,4040,3316,4040,4040,3564,2792,3570,2800,2804,2808,2810,2814,2818,2821,2823,2824,4040,4040,3315,4040,3428,2828,3896,3248,2833,2843,2434,2453,3918,2849,2907,2853,4040,2150,2148,4040,4040,4040,4040,2405,2349,4040,4040,4040,4040,2405,2349,4040,4040,4040,4040,2362,3442,4040,4040,4040,4040,2363,3773,3950,4040,4040,4040,2857,4040,2559,2968,3853,2862,2937,4379,2869,3988,3295,4040,2873,4040,4040,4040,3554,2285,2285,2285,2285,1987,1988,1988,1988,1989,1955,1955,1955,1955,1956,2103,4040,4040,4040,2472,4040,2109,2285,2285,2285,2113,3527,2877,4040,4040,4040,2886,2890,4040,4040,4040,4040,2980,4040,3336,2829,3897,2895,2899,4040,2911,2917,4040,4040,2922,4040,4040,4040,4040,2844,2923,4040,4040,2626,4289,4040,3453,3038,4353,4386,3183,4040,4040,4041,4370,4040,4040,2845,2924,4040,4040,4040,4040,4040,2990,4040,2558,2928,4420,2935,4040,2943,2949,4040,2970,2954,4040,4040,4040,4040,3855,2960,4040,4040,4040,4040,3855,2960,4040,4040,4040,4040,3389,4040,2966,3897,2974,2327,4275,4040,3590,2978,4040,3535,3379,3488,3521,3230,4040,4040,3540,4040,4040,4040,3439,4040,4040,4040,4364,4040,4040,4040,4040,4040,4040,4040,4040,4378,4040,4040,4040,2605,4040,4040,2245,4040,4040,3459,4040,4040,4038,3923,4040,2013,3616,2411,4040,3631,2988,4040,4040,3631,2988,4040,4040,4040,2994,4040,4040,2350,4262,2381,3617,4040,4040,4346,4040,4040,3e3,4040,4040,4346,4040,2350,4208,3615,2881,4040,2795,3174,3112,3180,3024,3111,3180,3180,3933,3014,3113,3113,3006,3181,3014,3013,3014,3175,4047,3018,3029,3053,4040,4040,4040,4040,3634,4040,4221,4040,3650,4040,4040,4040,4040,2631,3651,4040,4040,4040,4040,3648,4287,4291,4040,4010,4017,4303,4022,2632,3182,4040,4032,4040,1950,4012,4040,2865,4045,4051,3043,3047,4064,3061,3065,3069,3073,3077,3081,3105,3084,4040,4040,3633,4040,4040,3443,2444,4040,4040,4040,2450,4040,4040,4040,4349,4040,4040,3014,3276,2487,2961,2691,4276,3109,1976,3117,3127,3289,3135,3305,4040,3324,3322,4040,4040,3734,3779,3739,3744,3969,4040,3748,3754,3761,3943,3887,3765,4057,4040,2488,2962,2692,3163,3224,3188,3412,4040,4040,2085,3201,4040,4040,4040,4040,2343,3217,3223,3228,4040,4040,4040,3234,4040,4040,4040,4040,4040,3238,4040,4040,4040,4040,3422,4040,2529,2686,4354,3245,4040,4040,4040,4342,4040,4040,4040,4040,1972,4040,4040,4040,4040,4040,3255,4040,4040,4040,3423,3952,2686,4355,3261,4040,4040,3267,4040,4040,4040,1974,4040,4040,4040,3273,4040,4220,3981,2680,4356,3895,4040,3287,4040,4040,3293,4040,4040,2062,4040,4220,3953,3299,2146,4040,3303,4040,2607,4040,4040,2061,4040,4248,3309,3894,3498,4040,4360,4040,4040,4040,4369,4040,4374,3056,4383,3622,4040,4040,4390,4040,4040,4424,2742,4040,2633,4040,3056,4040,3039,3157,4040,4040,4040,4040,4040,4040,4040,2455,4325,4040,4040,4040,4040,4040,4040,4040,3320,4040,3330,3911,3335,3629,3588,4213,3943,3587,4213,4213,4040,3341,3589,3589,3628,4214,3341,3340,3341,3630,4040,4040,4040,4040,4040,4040,4040,4040,3836,2349,3347,4040,3354,3001,4080,4404,3358,3362,3366,3369,3373,3373,3377,4040,4040,3835,4091,3410,4040,4040,3416,4040,4040,3420,3427,4040,3433,4040,4331,3447,4040,4040,3797,4040,3795,4040,4040,4345,4040,2350,1964,4040,2879,4040,3397,4040,2904,4040,3350,3488,4040,3486,2535,3492,3496,4040,4040,4040,3502,4040,4040,4040,4127,4028,2010,4131,4141,4145,4149,4153,4157,4161,4165,4169,4173,4134,4377,4293,2534,3516,4040,4040,4040,2839,3504,4040,4040,4040,4040,2931,3442,4040,3450,4040,2902,4040,3799,4363,3520,4196,3525,3406,2349,2757,2305,2996,4393,4347,3544,4040,3549,4040,4040,3549,4040,4040,3558,2756,2305,4077,4395,3960,4040,3568,4040,3823,2349,4040,3997,3750,3574,3884,3961,4269,4040,4270,4040,3581,3944,3585,3595,3931,3600,2001,3930,3604,3604,4211,3614,3932,3621,3626,3662,3638,3655,3656,3660,3667,3674,3678,3682,3685,4040,4040,4040,3840,2596,3740,3850,2668,2332,3343,4040,3859,4040,4040,4040,2233,3865,2891,3735,2465,2351,3690,3698,3874,3702,3705,3709,3713,3717,3721,3725,3729,4040,2423,2421,3241,3772,4040,4040,2939,3777,3783,3789,3793,4136,2698,3342,2633,2425,3803,4040,4040,3808,2349,4040,4040,4186,3812,4040,4040,4040,3009,3822,3827,4040,3871,2532,4318,3881,4040,3891,3773,4040,4040,4040,4040,3901,4040,4040,4040,4040,4040,2385,4040,4040,4040,4040,3014,4040,2394,4040,2401,2379,4035,3922,4040,4040,2292,3927,4040,4040,4040,4040,3937,4040,4040,4040,4040,2091,3941,3948,4040,3957,3757,3966,2835,3112,4040,4040,2222,3979,4040,4040,2719,3973,2632,3183,3021,4040,4055,4040,4061,2419,4040,3023,4068,4074,4084,4112,4089,4095,3596,4100,4308,4099,4104,4110,4099,4113,4119,3257,4117,4123,4040,4040,4040,4040,4177,4184,2836,3686,4190,3693,4195,4200,4410,4205,4218,4040,3090,2735,4225,3093,4231,4040,4040,4040,3631,4235,2661,4040,2681,4429,2369,4040,4239,4040,4040,4040,4040,3804,4246,4040,4040,4040,4252,4040,4040,4040,2631,4260,4266,4040,4040,4040,4025,4185,2837,2686,2480,4274,4040,4280,4040,4040,4040,4040,4201,3978,4018,4303,3768,4040,3050,4040,4040,3985,4040,4040,3994,4040,4322,4385,4329,4040,4040,4040,4040,4335,4040,4040,4040,4040,3663,4339,4040,4040,4297,4040,3057,3087,4301,3962,3032,4040,4040,4040,4040,2624,4307,4040,4040,4040,4040,2624,4312,4315,4040,2322,3436,2837,2058,4040,4040,3035,4040,4401,4408,3694,4040,4040,3512,4040,2631,4414,4040,3511,4558,4433,6024,6027,4439,4466,4468,4468,4446,4455,4467,4468,4468,4468,4468,4468,4468,4473,4468,4468,4463,4457,4459,4479,4477,4483,4468,4469,4493,4496,4506,4510,4524,4519,4511,4500,4502,4502,4518,4519,4498,4515,4523,4528,4532,4536,4539,4547,4546,4543,4551,4554,4556,4566,5097,4574,6086,5003,5101,5101,5101,4593,4599,4602,4602,4602,4602,4608,4640,4568,4622,4628,5101,4434,5101,5099,5101,6713,5101,6256,5101,5101,4584,5992,5101,5101,4729,5101,5473,6277,5101,5007,4602,5693,4609,5696,5699,5699,5699,5699,4601,4602,5699,4602,4619,4621,4623,4627,6087,5101,4434,6165,6164,5101,5101,6380,6242,5096,5101,4576,5101,6463,5101,5101,5635,4488,5366,6275,5101,4581,5101,4590,5411,5123,5123,5123,5697,5699,4603,4621,4621,4622,4627,4627,4628,5101,4583,5448,6513,5474,5101,5008,5101,5101,4602,4632,5123,5699,4602,4602,4602,5704,5121,4602,4621,4627,5101,4583,6563,5101,4584,6017,5101,5101,5699,5701,4602,4602,4602,4632,4640,5705,5101,5101,5101,4734,5700,4602,4602,4602,5705,4643,5701,5101,5101,4824,5651,4602,4650,5101,5101,4824,6512,5010,5695,5123,5123,5698,5690,4602,4608,5696,5700,5703,5101,4602,5101,5101,5121,5123,5123,5123,5699,5699,5699,5702,5123,5698,5699,5702,4602,4602,5704,4607,4602,5705,5123,5697,5704,5101,5101,4816,4822,5699,4602,5704,5695,5698,5702,5694,5701,4651,4652,4650,5101,4592,5101,5101,5815,5567,5101,5101,5106,6519,6761,6550,6560,4662,4695,4656,4660,4693,4666,4673,4670,4680,4684,4691,4693,4693,4693,4693,4694,4676,4699,4693,4703,4708,4714,4704,4726,4740,4744,4687,4751,4753,4748,4787,4789,4789,4791,4757,4759,4761,4763,4776,4776,4770,4767,4774,4717,4675,4710,4780,4784,4795,4797,4801,4805,4809,5101,4592,6198,6202,4990,5007,5230,6461,5101,6373,5101,5101,4824,6698,4831,5101,5101,5101,4736,5108,5108,5101,5101,4826,6485,5490,5979,4838,5101,4720,4985,5101,4720,5101,5101,4853,5311,4857,5333,4876,4902,4906,4906,4906,4906,4908,4915,4917,4912,4921,4925,4928,4931,4934,4939,4938,4943,4944,4959,4949,4948,4953,4956,4963,5101,5107,5101,4892,5101,5007,5101,5101,5695,5123,5123,5123,5123,5696,5699,5988,5101,5101,5101,4825,5300,5101,5608,5101,4811,5449,6426,4969,5101,5101,4988,6219,5101,5018,4987,5101,5101,4860,5101,5101,4995,5015,5101,6412,5034,5101,5101,5101,4893,6751,6138,5101,5101,5101,4894,6729,5101,5101,5101,4965,5055,5068,5081,5086,5091,5076,5095,5101,4824,5933,5929,5376,5087,4434,5101,5101,5101,4979,5008,6409,5996,5101,5999,5151,5987,5376,5101,4826,6502,6738,6204,5101,6730,5101,5101,4891,5101,4570,5101,5115,5127,5074,4442,5096,5101,5101,5101,4975,5538,5411,5986,5281,5101,4840,5628,5355,5382,4434,4736,5101,4973,5101,5101,5101,4840,5687,5132,5075,5140,5890,5072,5076,5141,6462,4888,5101,5101,4895,5101,5343,5073,6582,4451,5101,4894,5101,5101,6416,5101,5101,5101,6191,5101,5415,5892,5074,6583,5096,5101,5101,4898,5999,5411,5280,5101,5101,4974,4978,5134,5157,5101,5101,5007,5101,5132,5075,5159,5101,4897,5101,5871,4980,5101,5949,5135,5159,5101,4976,5101,5101,5010,5101,5101,5169,4434,5101,5101,5009,5101,5101,5101,4613,4614,4975,5101,4614,5101,5411,4978,6164,6391,5101,4977,6380,5395,5376,5188,4872,5243,5197,5197,5194,5197,5199,5203,5205,5207,5209,5209,5209,5213,5213,5213,5213,5214,5213,5213,5215,5219,5221,5101,5101,5101,5036,5101,5059,5063,5372,5101,5101,5101,6378,6010,5101,4978,6569,5101,4980,5101,5417,5101,5101,5101,5891,5074,5240,5101,5351,6463,5247,5101,5101,5257,5101,5101,5101,5068,5263,6448,5875,5101,4981,5101,5101,5876,6281,5416,5275,4435,5874,5101,4990,6089,5406,5410,5101,5265,5407,5285,5101,5101,5297,6402,5101,5101,5304,5309,5101,5101,5101,5057,5371,5101,5101,5101,5059,5330,4833,5427,5101,5010,4978,5101,5415,5358,5101,5101,5101,5100,5883,5359,5101,5101,5102,6015,4893,5258,5101,5342,5432,5101,5348,5101,5024,6570,5977,5382,4434,5101,5101,5102,6113,5726,5101,6379,5101,5101,5101,5102,5101,5101,6462,5101,4561,5876,5101,6422,6426,5381,6381,6423,6427,5382,5101,5031,5101,5101,4866,4885,4811,5438,6425,5399,6381,5479,5101,5101,5101,5104,5106,5060,5064,5101,5035,5101,5101,5051,5101,5350,5101,5879,4896,5431,5101,5101,5101,5106,5101,4975,5471,5101,5101,5101,5107,6430,5101,5101,5101,5108,4890,6429,6381,5101,5101,5102,6446,5479,5101,5101,5453,5269,5410,5101,4614,5101,5101,6380,5153,5101,5101,5732,5268,5470,5101,5101,5102,6697,5459,5468,6381,5101,5041,5046,5045,5478,5101,5101,5453,4614,5101,5101,5101,5111,6088,5350,5877,5413,5538,5101,5101,5047,5047,5047,5461,5101,6088,6119,5106,5267,5271,5101,5047,6213,5101,5101,5404,4990,5404,5408,5404,4990,5404,5962,5423,5961,5101,6084,5423,5233,6104,5101,4990,5232,5230,5101,5232,4989,5232,5232,5232,5231,6488,5101,5101,5101,5168,5876,5722,5483,4434,5099,5101,5101,6498,6279,5487,5101,4886,6166,5489,5856,5494,5500,5498,5504,5504,5504,5504,5506,5513,5510,5517,5519,5519,5519,5521,5519,5525,5525,5525,5525,5527,6280,5415,5319,5672,5101,5005,6438,5101,5101,5103,5101,5101,5101,6361,6199,5571,5101,5101,5101,5176,5626,6498,5551,5101,6442,5561,5101,5814,5566,5575,5101,5101,5101,5181,6167,5004,6438,5101,5102,6092,6381,5580,5101,5101,5004,6127,5600,5863,5606,5862,5605,5101,5101,5235,5101,5101,5101,5424,5102,6128,5601,5864,5607,5101,5101,5101,5224,5101,6167,5101,5006,6440,5101,5569,5101,5102,6180,5148,5101,5101,5996,5101,6283,5464,5101,5101,5101,5228,5101,5620,5101,5101,5101,5232,5176,5626,6753,5665,5101,5101,5632,5321,4434,5101,5102,6362,6200,5027,5562,5101,5570,5101,5101,5223,5746,5463,5101,5101,5101,5266,4989,5621,5101,5101,5101,5278,6754,5666,5101,5101,5265,5407,6755,5376,5101,5101,4990,5101,5612,5415,5320,6393,5101,5101,5176,5639,5646,4577,5568,5410,5640,5664,5101,5101,5101,5293,5175,5639,5663,5376,5659,5376,5101,5101,5101,4980,5657,5676,5101,5101,5288,5037,5658,5101,5101,5101,5411,5123,5098,5101,5423,5101,5102,6471,6477,5098,5101,5424,5101,5101,5426,5098,5424,5101,5102,6558,5101,5101,5101,6393,5101,5426,5424,5568,5424,5233,5101,5101,5102,6562,5101,5104,5101,5101,5101,4974,6215,5710,4879,5101,6496,5376,5101,5105,5101,5424,5424,5099,5101,5105,5101,5101,5101,5720,4722,5730,5742,5751,5757,5766,5764,5767,5755,5761,5771,5774,5776,5778,5790,5782,5785,5789,5790,5791,5796,5795,5801,5797,5806,5101,5108,4976,5101,5110,6702,5101,5111,6707,5101,5123,5123,5123,5698,5699,5699,5700,4602,5801,5802,5801,5801,4998,5101,5098,5101,5101,5425,5101,5101,5812,5819,5557,5101,5145,5281,5101,4844,5876,4852,5595,5101,4888,5101,5950,5136,4434,5101,4615,5101,5101,5823,5848,5941,5101,5101,5363,5101,5472,5373,5101,5101,5386,5101,5860,4888,5868,5887,5011,5011,5101,5101,5414,5101,6528,5376,5101,5101,5414,6347,5545,5908,6527,4732,5904,6529,5101,5101,5423,5101,5101,5100,5942,5101,5101,5101,5426,5101,5101,5101,5479,5912,5924,5101,5101,5423,5163,5158,5101,5101,5101,4989,5101,5350,5929,5376,5101,5101,5454,5270,6215,5393,5374,5101,5168,5173,5101,5101,5101,5021,5109,5101,5411,5101,5853,5101,6347,5101,5100,5101,5102,5947,5925,5101,5101,5530,4980,4811,5650,5954,5376,4812,5959,5955,5101,5184,5539,6436,5879,5098,5102,5538,5101,6166,5101,5102,5447,5442,4585,5993,5101,5101,5538,6089,5099,4592,5101,5101,5546,5903,4584,5993,5101,5101,5649,5940,5102,4586,5994,5101,5231,4887,5101,4974,5100,5101,5101,6712,5101,5101,4584,5995,5101,5101,5706,5898,4585,5995,5101,5101,5808,5101,5106,5101,5413,6346,5102,6004,5101,5101,5833,5840,6392,5107,5412,5876,4894,5152,5101,5035,5576,5101,5101,5106,6016,5101,5101,5837,5841,5101,5101,5338,5101,6015,5101,5101,5101,5547,5412,5101,5101,5101,5612,5101,6161,5101,5101,5101,5679,5101,5101,6367,5101,5101,5842,6096,5101,6282,5101,4486,6021,6046,6045,6046,6046,6043,6046,6050,6054,6058,6062,6071,6066,6070,6071,6071,6075,6075,6075,6075,6078,6082,5101,5101,5842,6097,5103,5234,5101,5101,5880,5305,5101,5101,5047,5101,5101,6102,5109,6108,5101,5236,5101,5101,5325,5101,6117,5101,6123,5101,5249,6209,6202,5101,6493,5101,5101,5897,5101,5101,6142,6181,5096,5843,6097,5101,5101,5966,5101,5101,5996,5101,5101,5101,5876,5103,6174,5101,5101,5416,5421,5101,5101,5251,6200,6204,5101,5101,5101,5949,6147,6152,6e3,4980,4980,4980,5101,5292,4635,5101,5299,5101,5101,5058,5062,5371,6361,5737,5101,5101,5975,4848,5988,6137,5101,5101,5101,5882,5102,5734,5738,5101,5317,6462,5349,6382,5101,6160,6159,5101,6173,5101,5101,5999,5101,5101,6667,5106,4894,6247,4978,5101,5101,6004,5101,6361,6199,6203,5101,5101,5101,5896,6382,6382,5101,5101,6111,5418,5101,5101,6668,4893,6186,5101,6769,5879,5101,5101,5529,6188,5101,5101,6126,5599,5102,6197,6201,6205,5419,6182,4434,5101,5101,6089,5252,6201,6205,5585,5101,5101,5101,6007,6455,4450,5101,5101,6133,5101,5101,5101,5695,6454,4449,4434,5101,5350,5101,5878,5101,6280,4886,4988,6229,5101,5101,6162,4614,5101,6378,4434,5101,5375,5101,4562,6229,5101,4978,6214,6161,4980,5101,5101,6162,5101,5101,5101,5655,5640,6234,5101,5101,5101,6089,5101,6258,4434,6240,5101,6258,4434,5101,5404,5962,5101,5102,5437,6424,6235,5101,5101,5568,5410,5101,5101,6236,5101,6165,5101,5101,5101,6259,5101,5101,6164,5101,5101,5101,5648,5849,5942,5101,6260,5101,6165,5101,5405,5409,5101,5057,5268,5409,5101,5101,5102,6742,5253,5101,5101,5101,6260,5101,5101,6259,5101,6167,6258,5101,5101,5101,6112,6259,5101,6259,6165,4847,5987,5376,5568,6497,6259,5568,6497,6168,6257,6257,6261,6251,6254,6254,5101,5101,5101,6169,5118,5101,5916,5101,5414,5538,5101,5101,5918,4896,5553,4884,5037,6272,6287,6305,6299,6305,6303,6299,6309,6293,6290,6295,6322,6313,6327,6316,6319,6323,6332,6331,6339,6339,6340,6339,6339,6339,6336,6344,5101,5101,5101,6178,5224,5747,5376,5101,5101,5415,5101,5101,6351,4893,4893,4882,5230,5001,5101,6372,5101,5101,6214,4980,5101,6357,5969,5101,5417,5419,6353,6366,4434,5101,6371,6390,6397,6401,5101,5418,4636,5647,6434,5101,5101,5101,6192,5943,5101,5008,5101,4978,5101,4979,5101,5416,5101,6351,4893,5419,6352,4894,6268,6367,5002,5101,5101,6279,5641,5101,5101,5290,5101,6452,5101,5101,5101,6223,5101,6470,6459,6480,6475,6479,6205,5101,5423,5407,5101,5057,5061,5390,6481,5101,5101,5101,6228,5589,5588,5587,5101,5436,5442,6428,5402,5101,5101,5102,6143,6182,5106,5745,6520,5101,5455,5409,5101,5057,5061,5370,6267,5101,5410,5101,5535,5101,5101,5177,5640,5423,5999,5101,5101,6360,5736,6738,6204,5101,5101,6378,5101,5224,5077,5101,5008,6265,5555,5101,5415,5070,5082,5622,5101,5101,6278,6165,5233,5101,5377,6377,6386,5103,5101,5679,5101,5538,5101,5101,5101,5534,5538,4826,5935,6737,6204,4827,5936,6535,6204,6191,6191,5101,5101,6378,6393,5232,5101,5036,5101,5543,5259,5326,6190,5101,5101,5101,6278,5443,6506,4434,5101,5568,6236,5101,5101,5568,5101,5102,6511,5134,6507,5164,4451,5101,5101,6392,5101,6165,5101,6192,6192,6192,5101,5101,6378,6392,5101,5101,6517,5376,5101,5583,5101,5101,5101,6011,6524,5101,6278,5101,5101,5101,5037,6155,5101,5101,5101,6382,6533,6549,5101,5101,5101,6379,6393,5101,6544,6381,5101,5593,5101,5101,5229,5634,5101,6676,6549,5101,5616,6230,5101,5351,5877,4895,5411,5432,5101,5101,5101,5031,5101,6675,6548,5101,5101,5101,6391,5101,6539,5426,5101,5101,5417,5920,4896,5101,5648,6722,5416,6462,5101,5562,5101,6554,6381,5101,5680,5101,5101,6381,5101,5101,5101,5101,4583,5101,6540,5425,5101,5426,5101,5101,6709,5417,4895,5102,4595,5101,5101,6406,5101,4594,5403,6540,5101,5714,5003,4991,6090,6568,5101,5101,6464,4988,5101,6091,6381,5101,5842,5037,5998,5996,5996,5413,4893,5101,5101,5101,6419,5101,6091,5101,5101,6492,6491,5101,6091,5101,4895,4561,4896,5101,5101,6090,6089,4896,5101,5101,6494,6256,4559,5101,5101,6090,5101,5101,6090,4561,6089,4561,5101,6089,4560,5537,6089,5101,5537,6574,6752,4888,4577,5716,5997,6579,5101,5844,5037,5101,5101,5101,6196,5101,6462,6465,6463,4869,5826,5829,6587,4489,4646,6598,6591,6597,6593,6605,6602,6607,6611,6613,6617,6619,6628,6625,6632,6621,6635,6639,6640,6644,6647,6654,6653,6651,6658,6661,6665,5101,6574,6723,5101,5876,6281,5670,5418,5421,5101,5101,5101,6469,5107,5101,4975,5101,4976,6672,5101,5101,5101,6682,6494,5101,5101,5101,6695,6680,5313,6686,5101,5877,5684,4434,6246,5101,5101,6163,5101,5101,5101,6692,5101,5101,6495,5101,5101,6703,5101,5101,5101,6713,5101,5101,6718,6717,4834,6722,5101,5418,5422,5101,6727,6734,5101,5881,5357,5337,6746,5101,5101,5101,6495,6378,5101,6222,6745,5101,5889,5128,5074,4442,6224,6747,5101,5877,5615,5671,5876,5101,5879,5101,5899,6230,5101,5101,6089,5101,5101,4892,5101,5412,5002,6734,5101,5101,6711,5101,5101,5253,5101,5877,5877,5877,5101,5101,5101,6771,5101,5101,6575,5642,4635,5411,6089,5101,4889,5258,5101,5252,4561,5101,5101,6090,5252,4561,5876,5876,5101,5101,5101,5914,6353,6148,5106,4974,5101,5101,5972,5101,4989,5101,6165,5425,5101,6688,5107,5101,6111,5724,6759,5725,4561,5101,5101,5983,5994,5101,5190,5879,5101,5101,5101,5344,5376,5106,5101,5101,5413,6463,5879,5102,6775,6767,5101,5101,5997,5101,5101,5101,4811,4583,6765,5101,5101,5101,5101,6098,5420,5101,5998,5101,5101,5101,4818,5109,5101,5413,5537,5101,5101,6165,5101,6111,6564,5101,5998,5101,6769,5101,5101,6132,6137,5101,6098,5101,5101,6033,6031,6039,5105,5101,5109,5101,4863,5101,6776,5101,5101,5101,6035,4434,5101,6161,5536,5101,5036,5102,5101,5101,6088,5101,5101,5412,6089,1048576,1073741824,0,0,0,-872415232,4194560,4196352,270532608,2097152,4194304,117440512,134217728,4194304,16777216,4194432,3145728,16777216,134217728,536870912,1073741824,0,541065216,541065216,-2143289344,-2143289344,4194304,4194304,4196352,-2143289344,4194304,4194432,37748736,541065216,-2143289344,4194304,4194304,4194304,4194304,37748736,4194304,4194304,4198144,4196352,8540160,4194304,4194304,4194304,4196352,276901888,4194304,4194304,8425488,4194304,1,0,1024,1024,0,1024,742391808,239075328,-1405091840,742391808,742391808,775946240,239075328,171966464,775946240,171966464,171966464,171966464,171966464,-1405091840,775946240,775946240,-1405091840,-1371537408,775946240,775946240,775946240,171966464,239075328,239075328,171966464,775946240,-1371537408,775946240,775946240,-1371537408,239075328,775946240,775946240,775946240,775946240,4718592,64,4718592,2097216,4720640,541589504,4194368,541589504,4194400,4194368,541065280,4194368,-2143289280,4194368,-2143285440,-2143285408,-2143285408,-2109730976,-2143285408,-2143285408,-2143285408,-2143285408,776470528,-2143285408,-2109730976,775946336,775946304,776470528,775946304,-1908404384,2,4,8,262144,0,0,0,2147483648,8,262144,262144,1048576,0,128,4096,0,4194304,128,128,0,1048576,0,0,1536,1792,0,0,1,2,4,128,2097152,8192,8392704,0,0,1,4,8,262144,536870912,64,64,32,96,96,96,96,128,1536,524288,96,64,524288,524288,1536,1024,0,0,0,29,96,1048576,128,128,128,128,2048,2048,2048,2048,2048,2048,0,96,524288,96,64,0,0,128,1024,524288,64,64,96,96,524288,524288,4100,1024,100680704,96,524288,64,96,524288,64,80,528,524304,1048592,2097168,268435472,16,16,2,536936448,16,262160,16,536936448,16,17,17,20,16,48,16,16,20,560,24,560,48,2097680,3145744,1048592,1048592,2097168,16,1049104,2228784,2097168,2097168,16,16,16,16,20,48,48,3146256,2097680,1048592,16,16,16,28,0,2097552,3146256,16,16,16,21,16,16,28,16,0,16,0,-2046820352,0,0,2,2,2,2098064,17,21,266240,1048576,67108864,2147483648,0,0,64,65536,1048576,0,16,16,163577856,17,528,528,16,528,-161430188,-161429676,-161429676,-161430188,-161429680,-161430188,-161430188,-161429680,-161429676,-161349072,-161429675,-161349072,-161349072,-161349072,-161349072,-161347728,-161347728,-161347728,-161347728,-161298572,-160774288,-160299084,-161298572,-161298576,-160299088,-161298576,-160774284,-160774284,-161298572,-161298572,-161298572,-161298572,112,21,53,146804757,146812949,146862101,146863389,-161429676,-160905388,-161429676,-161429676,-161429676,-161429676,-161429675,-161349072,146863421,148960541,146863389,146863389,148960541,146863421,148960541,148960541,-161429740,-161429676,-160905388,-161298572,-161298572,-18860267,-160774284,-18729163,0,0,1,6,8,16,262144,0,0,1,8,0,24,0,0,1,14,16,32,1024,32768,100663296,-1073741824,0,0,0,150528,131072,16777216,0,0,1,102,1,32768,131328,131072,524288,2097152,8388608,16777216,164096,0,0,0,1007,0,1073741825,2147483648,2147483648,1073741824,8,0,0,58368,0,0,65536,1048576,4096,1048576,512,512,9476,134218240,0,1073741824,2621440,1073741824,2147483648,2147483648,0,0,66048,0,0,0,67108864,0,0,0,16384,0,0,0,8,0,0,0,9,4456448,8,16777216,1073774592,1226014816,100665360,100665360,100665360,100665360,-2046818288,1091799136,1091799136,1091803360,1091799136,1091799136,-2044196848,1091799136,1091799136,1091799136,1091799136,1091799136,1158908e3,1158908001,1192462432,1192462448,1192462448,1192462448,1192462448,1200851056,1091799393,1200851056,1200851056,1091799393,1200851056,1200851056,1200851056,1192462448,1870638912,1870638912,1870655296,1870638912,1870655296,1870655296,1870655296,1870655296,1870655296,1870655312,1870655316,1870655316,1870655316,1870655317,1870655348,1870655316,1870655316,1870655312,1870655312,1879027568,1879043952,1870655316,1870655316,1870655316,1870638928,1879043952,1879043956,0,0,1,12288,0,229440,1048576,1224736768,100663296,0,0,0,1024,0,0,8192,0,0,0,576,0,231488,1090519040,0,0,0,2048,0,0,134217728,0,1157627904,1191182336,0,0,131584,268435456,49152,0,0,0,134217728,0,0,0,16,0,0,0,13,0,9437184,231744,0,0,235712,0,0,131328,0,0,131072,32768,0,0,134217728,0,52e4,7864320,1862270976,0,0,0,4096,0,0,0,1862270976,1862270976,1862270976,0,16252928,0,0,0,8192,64,98304,1048576,150994944,83886080,117440512,0,0,2,4,16,32,256,1024,8192,33554432,0,0,64,256,3584,8192,16384,65536,262144,524288,1048576,2097152,4194304,2147483648,8192,98304,393216,524288,1048576,1048576,2097152,4194304,251658240,536870912,8192,16384,98304,393216,251658240,536870912,1073741824,0,0,2097152,0,0,0,0,1,0,0,0,2,0,0,0,3,240,0,83886080,117440512,64,0,2,0,0,524288,524288,524288,524288,256,1536,2048,8192,16384,256,1536,8192,65536,262144,524288,2097152,67108864,4194304,16777216,100663296,134217728,536870912,524288,2097152,134217728,268435456,536870912,1073741824,0,0,524288,2097152,0,0,1048576,2097152,67108864,1073741824,0,0,1536,65536,262144,524288,33554432,0,1024,65536,262144,2097152,2097152,1073741824,0,0,2,8,16,32,0,8192,4096,0,0,605503,1066401792,9476,512,0,32,384,8192,4194312,4194312,541065224,4194312,4194312,4194312,4194312,4194344,-869654016,-869654016,4203820,-869654016,-869654016,-869654016,-869654016,1279402504,1279402504,1279402504,1279402504,2143549415,2143549415,2143549415,2143549415,2143549423,2143549423,2143549423,2143549423,2143549423,2143549423,0,0,2,16384,32768,260,512,0,0,0,65536,0,0,0,384,8192,0,32,512,0,1050624,262144,512,1275208192,139264,1275068416,0,0,4,128,1024,2048,16384,262144,8,4194304,0,0,0,82432,0,40,0,0,4,256,1024,98304,131072,16777216,268435456,0,0,300,4203520,0,0,2097152,1073741824,2147483648,0,0,520,4333568,1275068416,0,0,4194304,1024,0,4096,8192,0,0,0,520,520,0,0,0,164096,999,29619200,2113929216,0,0,0,1007,1007,1007,0,0,8,124160,32,512,0,2048,524288,0,536870912,0,139264,0,0,0,139264,0,40,0,2621440,0,0,2147483648,1610612736,0,0,0,229376,0,40,0,524288,2097152,1073741824,44,0,0,0,262144,0,0,16384,229376,4194304,25165824,100663296,402653184,1610612736,0,110,110,110,0,0,8388608,8388608,8192,33554432,67108864,134217728,1073741824,0,2147483648,0,0,0,12545,25165824,33554432,67108864,402653184,536870912,0,104,104,104,8192,33554432,134217728,0,0,8388608,134217728,1073741824,0,229376,25165824,33554432,402653184,536870912,0,0,256,1024,65536,16777216,268435456,0,0,0,524288,0,0,0,64,0,0,0,128,0,0,0,256,0,0,0,300,524288,2097152,2147483648,0,0,1,6,32,64,256,512,256,1024,4096,8192,65536,2,4,32,64,256,1024,0,2,4,256,1024,65536,4,64,256,1024,0,0,8,8388608,0,98304,131072,25165824,268435456,536870912,0,0,8388608,4096,0,0,8,8,8,0,2048,524288,67108864,536870912,32,4100,67108864,0,32768,0,32768,0,1049088,0,134348800,270532608,0,1049088,1049088,8192,1049088,12845065,12845065,12845065,12845065,147193865,5505537,5591557,5587465,5587457,5587457,147202057,5587457,5587457,5591557,5587457,13894153,13894153,13894153,13894153,81003049,13894153,-1881791493,-1881791493,-1881791493,-1881791493,0,0,8,33554432,262144,0,33554432,1024,0,4,0,0,0,867647,1,5505024,0,0,15,16,32,192,86528,9,0,0,16,8192,0,0,23,0,75497472,0,0,0,1048576,5505024,-1887436800,0,0,0,2097152,268435456,0,0,4096,8192,67108864,0,0,262144,4194304,8388608,0,0,33554432,8192,0,0,288,8388608,0,0,0,81920,0,0,24,282624,64,896,8192,131072,262144,1048576,16777216,33554432,-1946157056,0,0,0,2621440,0,131072,0,32,0,0,2048,3145728,0,16384,65536,0,0,268435456,32,64,384,512,5120,8192,0,64,0,2048,1048576,0,0,32,64,384,8192,131072,0,0,32768,134217728,0,0,8,32,64,1024,2048,0,2,8,32,384,8192,131072,33554432,131072,1048576,33554432,134217728,2147483648,0,0,2048,524288,536870912,0,1073741824,0,131072,33554432,2147483648,0,0,33554432,1073741824,0,32,0,524288,0,0,67108864,64,64,0,96,96,0,524288,524288,524288,64,64,64,64,96,96,96,0,0,0,28,0,8396800,4194304,134217728,2048,134217728,0,0,32,1,0,8396800,0,0,32,64,128,1024,2048,262144,0,16384,0,2,4,64,128,3840,16384,19922944,2080374784,0,16384,16384,16777216,16384,32768,1048576,2097152,4194304,16777216,524288,268567040,16384,2113544,68489237,72618005,68423701,68423701,68423701,68489237,68423701,-2079059883,-2079059947,68423701,85200917,68423701,68423701,68423701,68423701,68423765,-2079059883,68425749,68423703,69488664,85200919,69488664,69488664,69488664,69488664,70537244,70537245,70537245,70537245,70537309,70537245,-2076946339,-2076946403,70537245,-2076946339,70537245,70537245,70537245,70537245,70539293,-2022351745,-2022351745,-2022351617,-2022351745,-2022351617,-2022351617,-2022351617,-2022351617,-2022351617,-2022351617,-2022351745,-2022351617,-2022351617,0,0,40,67108864,331776,83886080,0,0,59,140224,5505024,5242880,-2080374784,-2080374784,268288,29,0,284672,0,0,68157440,137363456,0,66,66,0,63,64,351232,63,192,351232,7340032,-2030043136,0,0,0,4194304,1,1024,32,64,256,32768,65536,512,131072,268435456,0,0,134348800,134348800,16,4096,262144,1048576,4194304,8388608,16777216,33554432,5242880,0,7,0,0,142606336,0,-872415232,0,0,0,131072,0,0,0,999,259072,4194304,25165824,0,20480,0,0,64,256,1536,8192,16384,0,12,3145728,0,0,0,3145728,64,3072,20480,65536,262144,32,192,3072,20480,4,1048576,0,0,128,131072,0,134218752,0,0,128,134217728,5242880,0,6,0,0,16384,65536,7340032,50331648,32,192,1024,2048,4096,8192,65536,32768,65536,4194304,16777216,2147483648,0,0,1,4,0,0,256,1536,65536,65536,2097152,4194304,50331648,2147483648,32,192,1024,65536,268435456,0,0,32768,4194304,16777216,0,0,184549376,0,0,243269632,0,0,32768,131072,131072,0,32768,32768,1,2,4,2097152,16777216,134217728,268435456,1073741824,2147483648,128,2097152,4194304,50331648,0,0,0,8388608,0,0,0,768,2,4,50331648,0,0,536870912,9216,0,0,0,49152,2,4,128,50331648,0,0,4096,4194304,268435456,0,0,1075838976,2097152,2097152,268435456,4194432,268435968,268435968,1073743872,268435968,0,128,6144,0,229376,128,268435968,268436032,256,256,536871168,256,256,256,256,257,256,384,-1879046336,-1879046334,1073744256,-1879046334,-1879046326,-1879046334,-1879046334,-1879046326,-1879046326,-1845491902,-1878784182,268444480,268444480,268436288,268436288,268436288,268436288,268436289,268444480,268444480,268444480,268444480,2100318149,2100318149,2100318149,2100318149,2100326341,2100326341,2100318149,2100326341,2100326341,0,0,256,2048,2048,0,0,0,4,8,262144,134217728,1,1024,0,4096,0,64,1856,2147483648,0,0,256,65536,2432,0,1864,0,1,2,16,32,64,0,301989888,0,262144,131072,0,0,832,8192,0,1,2,56,64,896,0,1,4036,19939328,2080374784,2080374784,0,0,0,16252928,1,16,32,128,512,2304,0,8,0,512,301989888,0,0,262144,524288,134217728,536870912,0,24576,0,0,0,33554432,0,0,0,32768,0,0,2097152,134217728,0,32768,196608,0,0,0,1,128,512,2048,524288,268435456,536870912,0,33554432,262144,8192,0,0,256,8388608,0,0,1,4,128,3584,16384,3145728,16777216,67108864,134217728,805306368,1073741824,0,0,1024,2048,16384,3145728,0,8192,0,8192,0,536870912,524288,536870912,1073741824,0,1,2,112,128,3072,2048,3145728,16777216,536870912,1073741824,0,0,2097152,16777216,1073741824,0,0,0,8192,8192,8192,9216,33554432,32768,33554432,0,0,262144,0,16777216,0,16777216,16777216,16777216,16777216,0,0,2097152,16777216,0,0,16777216,268500992,4243456,0,0,512,65536,0,4096,4096,0,4096,4096,4096,4096,0,0,0,32,0,0,0,41,0,4243456,4096,12289,1073754113,12289,12289,1124073472,12289,12289,1098920193,1098920193,1124073488,1124073472,1124073472,1258292224,1124073472,1124073474,1124073472,1124073472,1124073472,1124073472,1124073472,1392574464,1124073472,12289,1124085761,1124085761,1124085761,1124085761,1132474625,1098920209,1132474625,1132474625,1098920209,1132474625,1132474625,1132474625,1132474625,1400975617,1124085777,1124085761,1124085761,1258304513,2132360255,2132360255,2132622399,2132360255,2132622399,2132622399,2140749119,2141011263,2132622399,2132622399,2132622399,2132622399,2132360255,2141011263,2141011263,0,0,512,131072,0,128,131072,1024,134217728,0,0,0,50331648,1073741824,0,1,4,64,128,3584,318767104,0,0,0,268435456,0,12289,0,0,0,159383552,25165824,0,0,0,536870912,0,0,0,24576,58720256,0,0,12305,13313,0,0,0,1073741824,0,0,0,12561,0,78081,327155712,0,0,0,1275068416,0,605247,1058013184,1073741824,1073741824,8388608,0,0,503616,7864320,867391,1058013184,1073741824,0,1,6,96,384,512,1024,4096,8192,16384,229376,25165824,33554432,268435456,536870912,0,867647,1066401792,0,0,0,512,1048576,0,0,9,8388608,12288,0,0,0,512,2760704,77824,0,0,0,1024,2048,3145728,2048,77824,524288,1048576,0,0,0,512,0,1048576,0,1,30,32,1024,2048,1024,2048,339968,524288,1048576,16777216,100663296,134217728,805306368,1073741824,1024,2048,12288,65536,0,65536,0,0,19947520,0,0,0,16777216,0,0,0,5,1024,2048,12288,327680,524288,33554432,134217728,536870912,1073741824,14,16,1024,4096,8192,229376,0,2,16384,4194304,2147483648,0,0,0,8,0,65536,262144,7340032,50331648,67108864,2147483648,4096,65536,262144,524288,1048576,33554432,256,0,256,0,256,1,12,1024,134217728,262144,134217728,536870912,0,0,268435456,1,4,8,134217728,4,8,536870912,0,2,16,64,128,0,0,262144,536870912,0,0,1073741824,32768,0,8,32,512,4096,9437184,0,0,1048576,2097152,4194304,67108864,134217728,0,1024,137363456,66,25165824,26214400,92274688,92274688,25165952,92274688,25165824,25165824,92274688,25165824,25165824,92274688,92274688,92274720,92274688,25165824,92274688,93323264,25165890,100721664,100721664,25165890,100721928,100721928,100787464,100853e3,100721928,100721928,125977600,125977600,125977600,125977600,127026176,125977600,125846528,125846528,125846560,125846528,125846528,125846528,126895104,125846528,125977600,127026176,125977600,125977600,127026176,127026176,281843,281843,1330419,281843,1330419,281843,1330419,1330419,281843,281843,281843,5524723,39079155,72633587,5524723,5524723,5524723,5524723,93605107,72633587,72633587,92556531,93605107,127290611,127290611,97799411,127290611,131484915,0,0,1536,2147483648,0,0,17408,33554432,0,1,12,1024,262144,0,58624,0,0,1536,0,189696,0,0,0,1792,2147483648,0,148480,50331648,0,1,14,1024,4096,65536,524288,240,19456,262144,0,0,19456,262144,0,4194304,0,0,1024,2097152,0,0,0,150528,0,0,0,512,4096,8192,131072,0,57344,0,0,0,2048,100663296,0,0,256,0,65536,524288,1048576,33554432,67108864,2,48,64,128,3072,16384,262144,0,0,32,4096,8192,131072,1048576,8388608,33554432,134217728,2048,262144,0,0,2048,268435456,16,64,128,262144,0,0,32768,65536,131072,0,1,2,16,64,0],r.TOKEN=["(0)","PragmaContents","DirCommentContents","DirPIContents","CDataSection","Wildcard","EQName","URILiteral","IntegerLiteral","DecimalLiteral","DoubleLiteral","StringLiteral","PredefinedEntityRef","'\"\"'","EscapeApos","ElementContentChar","QuotAttrContentChar","AposAttrContentChar","PITarget","NCName","QName","S","S","CharRef","CommentContents","EOF","'!'","'!='","'\"'","'#'","'#)'","'$'","'%'","''''","'('","'(#'","'(:'","')'","'*'","'*'","'+'","','","'-'","'-->'","'.'","'..'","'/'","'//'","'/>'","':'","':)'","'::'","':='","';'","'<'","'<!--'","'</'","'<<'","'<='","'<?'","'='","'>'","'>='","'>>'","'?'","'?>'","'@'","'NaN'","'['","']'","'after'","'all'","'allowing'","'ancestor'","'ancestor-or-self'","'and'","'any'","'append'","'array'","'as'","'ascending'","'at'","'attribute'","'base-uri'","'before'","'boundary-space'","'break'","'by'","'case'","'cast'","'castable'","'catch'","'check'","'child'","'collation'","'collection'","'comment'","'constraint'","'construction'","'contains'","'content'","'context'","'continue'","'copy'","'copy-namespaces'","'count'","'decimal-format'","'decimal-separator'","'declare'","'default'","'delete'","'descendant'","'descendant-or-self'","'descending'","'diacritics'","'different'","'digit'","'distance'","'div'","'document'","'document-node'","'element'","'else'","'empty'","'empty-sequence'","'encoding'","'end'","'entire'","'eq'","'every'","'exactly'","'except'","'exit'","'external'","'first'","'following'","'following-sibling'","'for'","'foreach'","'foreign'","'from'","'ft-option'","'ftand'","'ftnot'","'ftor'","'function'","'ge'","'greatest'","'group'","'grouping-separator'","'gt'","'idiv'","'if'","'import'","'in'","'index'","'infinity'","'inherit'","'insensitive'","'insert'","'instance'","'integrity'","'intersect'","'into'","'is'","'item'","'json'","'json-item'","'key'","'language'","'last'","'lax'","'le'","'least'","'let'","'levels'","'loop'","'lowercase'","'lt'","'minus-sign'","'mod'","'modify'","'module'","'most'","'namespace'","'namespace-node'","'ne'","'next'","'no'","'no-inherit'","'no-preserve'","'node'","'nodes'","'not'","'object'","'occurs'","'of'","'on'","'only'","'option'","'or'","'order'","'ordered'","'ordering'","'paragraph'","'paragraphs'","'parent'","'pattern-separator'","'per-mille'","'percent'","'phrase'","'position'","'preceding'","'preceding-sibling'","'preserve'","'previous'","'processing-instruction'","'relationship'","'rename'","'replace'","'return'","'returning'","'revalidation'","'same'","'satisfies'","'schema'","'schema-attribute'","'schema-element'","'score'","'self'","'sensitive'","'sentence'","'sentences'","'skip'","'sliding'","'some'","'stable'","'start'","'stemming'","'stop'","'strict'","'strip'","'structured-item'","'switch'","'text'","'then'","'thesaurus'","'times'","'to'","'treat'","'try'","'tumbling'","'type'","'typeswitch'","'union'","'unique'","'unordered'","'updating'","'uppercase'","'using'","'validate'","'value'","'variable'","'version'","'weight'","'when'","'where'","'while'","'wildcards'","'window'","'with'","'without'","'word'","'words'","'xquery'","'zero-digit'","'{'","'{{'","'{|'","'|'","'||'","'|}'","'}'","'}}'"]},{}],"/node_modules/xqlint/lib/tree_ops.js":[function(e,t,n){"use strict";n.TreeOps={flatten:function(e){var t=this,n="";if(!e)throw new Error("Invalid node found");return e.value===undefined?e.children.forEach(function(e){n+=t.flatten(e)}):n+=e.value,n},concat:function(e,t,n){var r=n?{}:e;n&&Object.keys(e).forEach(function(t){r[t]=e[t]});var i=Object.keys(t);return i.forEach(function(e){r[e]=t[e]}),r},removeParentPtr:function(e){e.getParent!==undefined&&delete e.getParent;for(var t in e.children){var n=e.children[t];this.removeParentPtr(n)}},inRange:function(e,t,n){if(e&&e.sl<=t.line&&t.line<=e.el){if(e.sl<t.line&&t.line<e.el)return!0;if(e.sl===t.line&&t.line<e.el)return e.sc<=t.col;if(e.sl===t.line&&e.el===t.line)return e.sc<=t.col&&t.col<=e.ec+(n?1:0);if(e.sl<t.line&&e.el===t.line)return t.col<=e.ec+(n?1:0)}},findNode:function(e,t){if(!e)return;var n=e.pos;if(this.inRange(n,t)===!0){for(var r in e.children){var i=e.children[r],s=this.findNode(i,t);if(s!==undefined)return s}return e}return},astAsXML:function(e,t){var n="";t=t?t:"",e.value&&(n+=t+"<"+e.name+">"+e.value+"</"+e.name+">\n"),n+=t+"<"+e.name+">\n";var r=this;return e.children.forEach(function(e){n+=r.astAsXML(e,t+"  ")}),n+=t+"</"+e.name+">\n",n}}},{}],"/node_modules/xqlint/lib/xqdoc/parse_comment.js":[function(e,t,n){"use strict";n.parseComment=function(e){e=e.trim();var t=e.substring(0,3)==="(:~";if(t){var n=e.split("\n"),r={description:""};return n.forEach(function(e,t){t===0&&(e=e.substring(3)),e=e.trim(),e[0]===":"&&(e=e.substring(1)),e=e.trim(),r.description+=" "+e}),r.description=r.description.trim(),r.description=r.description.substring(0,r.description.length-2).trim(),r}}},{}],"/node_modules/xqlint/lib/xqdoc/xqdoc.js":[function(e,t,n){var r=e("lodash"),i=e("./parse_comment").parseComment;n.XQDoc=function(e){"use strict";var t={};this.getDoc=function(){return t},this.WS=function(e){e.value.trim().substring(0,3)==="(:~"&&(e.getParent.comment=i(e.value))},this.AnnotatedDecl=function(e){this.visitChildren(e),e.comment=e.getParent.comment,e.getParent.comment=undefined},this.XQuery=function(e){this.visitChildren(e)},this.getXQDoc=function(e){var t={moduleNamespace:e.moduleNamespace,description:e.description,variables:[],functions:[]};return r.forEach(e.variables,function(e){var n=r.cloneDeep(e.qname);n.annotations=e.annotations,n.description=e.description,n.type=e.type,n.occurrence=e.occurrence,t.variables.push(n)}),r.forEach(e.functions,function(e,n){if(n.substring(0,"http://www.w3.org/2001/XMLSchema#".length)==="http://www.w3.org/2001/XMLSchema#")return;var r=n.split("#");t.functions.push({name:r[0],uri:r[1],params:e.params})}),t},this.visit=function(e){var t=e.name,n=!1;typeof this[t]=="function"&&(n=this[t](e)===!0),n||this.visitChildren(e)},this.visitChildren=function(e,t){for(var n=0;n<e.children.length;n++){var r=e.children[n];t!==undefined&&typeof t[r.name]=="function"?t[r.name](r):this.visit(r)}},this.visit(e)}},{"./parse_comment":"/node_modules/xqlint/lib/xqdoc/parse_comment.js",lodash:"/node_modules/xqlint/node_modules/lodash/index.js"}],"/node_modules/xqlint/lib/xqlint.js":[function(e,t,n){"use strict";var r=e("lodash"),i=e("./parsers/JSONiqParser").JSONiqParser,s=e("./parsers/XQueryParser").XQueryParser,o=e("./parsers/JSONParseTreeHandler").JSONParseTreeHandler,u=e("./compiler/translator").Translator,a=e("./formatter/style_checker").StyleChecker,f=e("./xqdoc/xqdoc").XQDoc,l=e("../lib/completion/completer"),c=e("./tree_ops").TreeOps,h=n.createStaticContext=function(){var t=e("./compiler/static_context").StaticContext;return new t},p=function(e,t,n){var r=e.substring(0,t),i=e.substring(0,n),s=r.split("\n").length,o=t-r.lastIndexOf("\n"),u=i.split("\n").length,a=n-i.lastIndexOf("\n"),f={sl:s-1,sc:o-1,el:u-1,ec:a-1};return f};n.JSONiqLexer=e("./lexers/jsoniq_lexer").JSONiqLexer,n.XQueryLexer=e("./lexers/xquery_lexer").XQueryLexer,n.XQLint=function(e,t){r.defaults&&(t=r.defaults(t?t:{},{styleCheck:!1}));var n,d,v=t.staticContext?t.staticContext:h();this.getAST=function(){return n},this.printAST=function(){return c.astAsXML(n,"  ")},this.getXQDoc=function(){return d.getXQDoc(v)};var m=[];this.getMarkers=function(){return m},this.getMarkers=function(e){var t=[];return m.forEach(function(n){(n.type===e||e===undefined)&&t.push(n)}),t},this.getErrors=function(){return this.getMarkers("error")},this.getWarnings=function(){return this.getMarkers("warning")},this.getCompletions=function(t){return l.complete(e,n,v,t)};var g=!1;this.hasSyntaxError=function(){return g};var y=t.fileName?t.fileName:"",b=y.substring(y.length-".jq".length).indexOf(".jq")!==-1&&e.indexOf("xquery version")!==0||e.indexOf("jsoniq version")===0,w=new o(e),E=b?new i(e,w):new s(e,w);try{E.parse_XQuery()}catch(S){if(!(S instanceof E.ParseException))throw S;g=!0,w.closeParseTree();var x=p(e,S.getBegin(),S.getEnd()),T=E.getErrorMessage(S);x.sc===x.ec&&x.ec++,m.push({pos:x,type:"error",level:"error",message:T})}n=w.getParseTree(),t.styleCheck&&(m=m.concat((new a(n,e)).getMarkers())),d=new f(n);var N=new u(v,n);m=m.concat(N.getMarkers())}},{"../lib/completion/completer":"/node_modules/xqlint/lib/completion/completer.js","./compiler/static_context":"/node_modules/xqlint/lib/compiler/static_context.js","./compiler/translator":"/node_modules/xqlint/lib/compiler/translator.js","./formatter/style_checker":"/node_modules/xqlint/lib/formatter/style_checker.js","./lexers/jsoniq_lexer":"/node_modules/xqlint/lib/lexers/jsoniq_lexer.js","./lexers/xquery_lexer":"/node_modules/xqlint/lib/lexers/xquery_lexer.js","./parsers/JSONParseTreeHandler":"/node_modules/xqlint/lib/parsers/JSONParseTreeHandler.js","./parsers/JSONiqParser":"/node_modules/xqlint/lib/parsers/JSONiqParser.js","./parsers/XQueryParser":"/node_modules/xqlint/lib/parsers/XQueryParser.js","./tree_ops":"/node_modules/xqlint/lib/tree_ops.js","./xqdoc/xqdoc":"/node_modules/xqlint/lib/xqdoc/xqdoc.js",lodash:"/node_modules/xqlint/node_modules/lodash/index.js"}],"/node_modules/xqlint/node_modules/lodash/index.js":[function(e,t,n){(function(e){(function(){function Ht(e,t){if(e!==t){var n=e===null,i=e===r,s=e===e,o=t===null,u=t===r,a=t===t;if(e>t&&!o||!s||n&&!u&&a||i&&a)return 1;if(e<t&&!n||!a||o&&!i&&s||u&&s)return-1}return 0}function Bt(e,t,n){var r=e.length,i=n?r:-1;while(n?i--:++i<r)if(t(e[i],i,e))return i;return-1}function jt(e,t,n){if(t!==t)return Jt(e,n);var r=n-1,i=e.length;while(++r<i)if(e[r]===t)return r;return-1}function Ft(e){return typeof e=="function"||!1}function It(e){return e==null?"":e+""}function qt(e,t){var n=-1,r=e.length;while(++n<r&&t.indexOf(e.charAt(n))>-1);return n}function Rt(e,t){var n=e.length;while(n--&&t.indexOf(e.charAt(n))>-1);return n}function Ut(e,t){return Ht(e.criteria,t.criteria)||e.index-t.index}function zt(e,t,n){var r=-1,i=e.criteria,s=t.criteria,o=i.length,u=n.length;while(++r<o){var a=Ht(i[r],s[r]);if(a){if(r>=u)return a;var f=n[r];return a*(f==="asc"||f===!0?1:-1)}}return e.index-t.index}function Wt(e){return St[e]}function Xt(e){return xt[e]}function Vt(e,t,n){return t?e=Ct[e]:n&&(e=kt[e]),"\\"+e}function $t(e){return"\\"+kt[e]}function Jt(e,t,n){var r=e.length,i=t+(n?0:-1);while(n?i--:++i<r){var s=e[i];if(s!==s)return i}return-1}function Kt(e){return!!e&&typeof e=="object"}function Qt(e){return e<=160&&e>=9&&e<=13||e==32||e==160||e==5760||e==6158||e>=8192&&(e<=8202||e==8232||e==8233||e==8239||e==8287||e==12288||e==65279)}function Gt(e,t){var n=-1,r=e.length,i=-1,s=[];while(++n<r)e[n]===t&&(e[n]=S,s[++i]=n);return s}function Yt(e,t){var n,r=-1,i=e.length,s=-1,o=[];while(++r<i){var u=e[r],a=t?t(u,r,e):u;if(!r||n!==a)n=a,o[++s]=u}return o}function Zt(e){var t=-1,n=e.length;while(++t<n&&Qt(e.charCodeAt(t)));return t}function en(e){var t=e.length;while(t--&&Qt(e.charCodeAt(t)));return t}function tn(e){return Tt[e]}function nn(e){function Hn(e){if(Kt(e)&&!mu(e)&&!(e instanceof In)){if(e instanceof jn)return e;if(Mt.call(e,"__chain__")&&Mt.call(e,"__wrapped__"))return gs(e)}return new jn(e)}function Bn(){}function jn(e,t,n){this.__wrapped__=e,this.__actions__=n||[],this.__chain__=!!t}function In(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=Ln,this.__views__=[]}function qn(){var e=new In(this.__wrapped__);return e.__actions__=Yn(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Yn(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Yn(this.__views__),e}function Rn(){if(this.__filtered__){var e=new In(this);e.__dir__=-1,e.__filtered__=!0}else e=this.clone(),e.__dir__*=-1;return e}function Un(){var e=this.__wrapped__.value(),t=this.__dir__,n=mu(e),r=t<0,i=n?e.length:0,s=Ki(0,i,this.__views__),o=s.start,u=s.end,a=u-o,f=r?u:o-1,l=this.__iteratees__,c=l.length,h=0,p=xn(a,this.__takeCount__);if(!n||i<y||i==a&&p==a)return ii(r&&n?e.reverse():e,this.__actions__);var d=[];e:while(a--&&h<p){f+=t;var v=-1,m=e[f];while(++v<c){var g=l[v],E=g.iteratee,S=g.type,x=E(m);if(S==w)m=x;else if(!x){if(S==b)continue e;break e}}d[h++]=m}return d}function zn(){this.__data__={}}function Wn(e){return this.has(e)&&delete this.__data__[e]}function Xn(e){return e=="__proto__"?r:this.__data__[e]}function Vn(e){return e!="__proto__"&&Mt.call(this.__data__,e)}function $n(e,t){return e!="__proto__"&&(this.__data__[e]=t),this}function Jn(e){var t=e?e.length:0;this.data={hash:gn(null),set:new cn};while(t--)this.push(e[t])}function Kn(e,t){var n=e.data,r=typeof t=="string"||Nu(t)?n.set.has(t):n.hash[t];return r?0:-1}function Qn(e){var t=this.data;typeof e=="string"||Nu(e)?t.set.add(e):t.hash[e]=!0}function Gn(e,n){var r=-1,i=e.length,s=-1,o=n.length,u=t(i+o);while(++r<i)u[r]=e[r];while(++s<o)u[r++]=n[s];return u}function Yn(e,n){var r=-1,i=e.length;n||(n=t(i));while(++r<i)n[r]=e[r];return n}function Zn(e,t){var n=-1,r=e.length;while(++n<r)if(t(e[n],n,e)===!1)break;return e}function er(e,t){var n=e.length;while(n--)if(t(e[n],n,e)===!1)break;return e}function tr(e,t){var n=-1,r=e.length;while(++n<r)if(!t(e[n],n,e))return!1;return!0}function nr(e,t,n,r){var i=-1,s=e.length,o=r,u=o;while(++i<s){var a=e[i],f=+t(a);n(f,o)&&(o=f,u=a)}return u}function rr(e,t){var n=-1,r=e.length,i=-1,s=[];while(++n<r){var o=e[n];t(o,n,e)&&(s[++i]=o)}return s}function ir(e,n){var r=-1,i=e.length,s=t(i);while(++r<i)s[r]=n(e[r],r,e);return s}function sr(e,t){var n=-1,r=t.length,i=e.length;while(++n<r)e[i+n]=t[n];return e}function or(e,t,n,r){var i=-1,s=e.length;r&&s&&(n=e[++i]);while(++i<s)n=t(n,e[i],i,e);return n}function ur(e,t,n,r){var i=e.length;r&&i&&(n=e[--i]);while(i--)n=t(n,e[i],i,e);return n}function ar(e,t){var n=-1,r=e.length;while(++n<r)if(t(e[n],n,e))return!0;return!1}function fr(e,t){var n=e.length,r=0;while(n--)r+=+t(e[n])||0;return r}function lr(e,t){return e===r?t:e}function cr(e,t,n,i){return e===r||!Mt.call(i,n)?t:e}function hr(e,t,n){var i=-1,s=ta(t),o=s.length;while(++i<o){var u=s[i],a=e[u],f=n(a,t[u],u,e,t);if((f===f?f!==a:a===a)||a===r&&!(u in e))e[u]=f}return e}function pr(e,t){return t==null?e:vr(t,ta(t),e)}function dr(e,n){var i=-1,s=e==null,o=!s&&es(e),u=o?e.length:0,a=n.length,f=t(a);while(++i<a){var l=n[i];o?f[i]=ts(l,u)?e[l]:r:f[i]=s?r:e[l]}return f}function vr(e,t,n){n||(n={});var r=-1,i=t.length;while(++r<i){var s=t[r];n[s]=e[s]}return n}function mr(e,t,n){var i=typeof e;return i=="function"?t===r?e:ui(e,t,n):e==null?qa:i=="object"?qr(e):t===r?Ja(e):Rr(e,t)}function gr(e,t,n,i,s,o,u){var a;n&&(a=s?n(e,i,s):n(e));if(a!==r)return a;if(!Nu(e))return e;var f=mu(e);if(f){a=Qi(e);if(!t)return Yn(e,a)}else{var l=Dt.call(e),c=l==L;if(!(l==M||l==x||c&&!s))return Et[l]?Yi(e,l,t):s?e:{};a=Gi(c?{}:e);if(!t)return pr(a,e)}o||(o=[]),u||(u=[]);var h=o.length;while(h--)if(o[h]==e)return u[h];return o.push(e),u.push(a),(f?Zn:_r)(e,function(r,i){a[i]=gr(r,t,n,i,e,o,u)}),a}function br(e,t,n){if(typeof e!="function")throw new Ct(E);return hn(function(){e.apply(r,n)},t)}function wr(e,t){var n=e?e.length:0,r=[];if(!n)return r;var i=-1,s=Xi(),o=s==jt,u=o&&t.length>=y?mi(t):null,a=t.length;u&&(s=Kn,o=!1,t=u);e:while(++i<n){var f=e[i];if(o&&f===f){var l=a;while(l--)if(t[l]===f)continue e;r.push(f)}else s(t,f,0)<0&&r.push(f)}return r}function xr(e,t){var n=!0;return Er(e,function(e,r,i){return n=!!t(e,r,i),n}),n}function Tr(e,t,n,r){var i=r,s=i;return Er(e,function(e,o,u){var a=+t(e,o,u);if(n(a,i)||a===r&&a===s)i=a,s=e}),s}function Nr(e,t,n,i){var s=e.length;n=n==null?0:+n||0,n<0&&(n=-n>s?0:s+n),i=i===r||i>s?s:+i||0,i<0&&(i+=s),s=n>i?0:i>>>0,n>>>=0;while(n<s)e[n++]=t;return e}function Cr(e,t){var n=[];return Er(e,function(e,r,i){t(e,r,i)&&n.push(e)}),n}function kr(e,t,n,r){var i;return n(e,function(e,n,s){if(t(e,n,s))return i=r?n:e,!1}),i}function Lr(e,t,n,r){r||(r=[]);var i=-1,s=e.length;while(++i<s){var o=e[i];Kt(o)&&es(o)&&(n||mu(o)||vu(o))?t?Lr(o,t,n,r):sr(r,o):n||(r[r.length]=o)}return r}function Mr(e,t){return Ar(e,t,na)}function _r(e,t){return Ar(e,t,ta)}function Dr(e,t){return Or(e,t,ta)}function Pr(e,t){var n=-1,r=t.length,i=-1,s=[];while(++n<r){var o=t[n];Tu(e[o])&&(s[++i]=o)}return s}function Hr(e,t,n){if(e==null)return;n!==r&&n in vs(e)&&(t=[n]);var i=0,s=t.length;while(e!=null&&i<s)e=e[t[i++]];return i&&i==s?e:r}function Br(e,t,n,r,i,s){return e===t?!0:e==null||t==null||!Nu(e)&&!Kt(t)?e!==e&&t!==t:jr(e,t,Br,n,r,i,s)}function jr(e,t,n,r,i,s,o){var u=mu(e),a=mu(t),f=T,l=T;u||(f=Dt.call(e),f==x?f=M:f!=M&&(u=Pu(e))),a||(l=Dt.call(t),l==x?l=M:l!=M&&(a=Pu(t)));var c=f==M,h=l==M,p=f==l;if(p&&!u&&!c)return qi(e,t,f);if(!i){var d=c&&Mt.call(e,"__wrapped__"),v=h&&Mt.call(t,"__wrapped__");if(d||v)return n(d?e.value():e,v?t.value():t,r,i,s,o)}if(!p)return!1;s||(s=[]),o||(o=[]);var m=s.length;while(m--)if(s[m]==e)return o[m]==t;s.push(e),o.push(t);var g=(u?Ii:Ri)(e,t,n,r,i,s,o);return s.pop(),o.pop(),g}function Fr(e,t,n){var i=t.length,s=i,o=!n;if(e==null)return!s;e=vs(e);while(i--){var u=t[i];if(o&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}while(++i<s){u=t[i];var a=u[0],f=e[a],l=u[1];if(o&&u[2]){if(f===r&&!(a in e))return!1}else{var c=n?n(f,l,a):r;if(c===r?!Br(l,f,n,!0):!c)return!1}}return!0}function Ir(e,n){var r=-1,i=es(e)?t(e.length):[];return Er(e,function(e,t,s){i[++r]=n(e,t,s)}),i}function qr(e){var t=$i(e);if(t.length==1&&t[0][2]){var n=t[0][0],i=t[0][1];return function(e){return e==null?!1:e[n]===i&&(i!==r||n in vs(e))}}return function(e){return Fr(e,t)}}function Rr(e,t){var n=mu(e),i=rs(e)&&os(t),s=e+"";return e=ms(e),function(o){if(o==null)return!1;var u=s;o=vs(o);if((n||!i)&&!(u in o)){o=e.length==1?o:Hr(o,Qr(e,0,-1));if(o==null)return!1;u=Ps(e),o=vs(o)}return o[u]===t?t!==r||u in o:Br(t,o[u],r,!0)}}function Ur(e,t,n,i,s){if(!Nu(e))return e;var o=es(t)&&(mu(t)||Pu(t)),u=o?r:ta(t);return Zn(u||t,function(a,f){u&&(f=a,a=t[f]);if(Kt(a))i||(i=[]),s||(s=[]),zr(e,t,f,Ur,n,i,s);else{var l=e[f],c=n?n(l,a,f,e,t):r,h=c===r;h&&(c=a),(c!==r||o&&!(f in e))&&(h||(c===c?c!==l:l===l))&&(e[f]=c)}}),e}function zr(e,t,n,i,s,o,u){var a=o.length,f=t[n];while(a--)if(o[a]==f){e[n]=u[a];return}var l=e[n],c=s?s(l,f,n,e,t):r,h=c===r;h&&(c=f,es(f)&&(mu(f)||Pu(f))?c=mu(l)?l:es(l)?Yn(l):[]:Mu(f)||vu(f)?c=vu(l)?Iu(l):Mu(l)?l:{}:h=!1),o.push(f),u.push(c);if(h)e[n]=i(c,f,s,o,u);else if(c===c?c!==l:l===l)e[n]=c}function Wr(e){return function(t){return t==null?r:t[e]}}function Xr(e){var t=e+"";return e=ms(e),function(n){return Hr(n,e,t)}}function Vr(e,t){var n=e?t.length:0;while(n--){var r=t[n];if(r!=i&&ts(r)){var i=r;pn.call(e,r,1)}}return e}function $r(e,t){return e+yn(Cn()*(t-e+1))}function Jr(e,t,n,r,i){return i(e,function(e,i,s){n=r?(r=!1,e):t(n,e,i,s)}),n}function Qr(e,n,i){var s=-1,o=e.length;n=n==null?0:+n||0,n<0&&(n=-n>o?0:o+n),i=i===r||i>o?o:+i||0,i<0&&(i+=o),o=n>i?0:i-n>>>0,n>>>=0;var u=t(o);while(++s<o)u[s]=e[s+n];return u}function Gr(e,t){var n;return Er(e,function(e,r,i){return n=t(e,r,i),!n}),!!n}function Yr(e,t){var n=e.length;e.sort(t);while(n--)e[n]=e[n].value;return e}function Zr(e,t,n){var r=Ui(),i=-1;t=ir(t,function(e){return r(e)});var s=Ir(e,function(e){var n=ir(t,function(t){return t(e)});return{criteria:n,index:++i,value:e}});return Yr(s,function(e,t){return zt(e,t,n)})}function ei(e,t){var n=0;return Er(e,function(e,r,i){n+=+t(e,r,i)||0}),n}function ti(e,t){var n=-1,r=Xi(),i=e.length,s=r==jt,o=s&&i>=y,u=o?mi():null,a=[];u?(r=Kn,s=!1):(o=!1,u=t?[]:a);e:while(++n<i){var f=e[n],l=t?t(f,n,e):f;if(s&&f===f){var c=u.length;while(c--)if(u[c]===l)continue e;t&&u.push(l),a.push(f)}else r(u,l,0)<0&&((t||o)&&u.push(l),a.push(f))}return a}function ni(e,n){var r=-1,i=n.length,s=t(i);while(++r<i)s[r]=e[n[r]];return s}function ri(e,t,n,r){var i=e.length,s=r?i:-1;while((r?s--:++s<i)&&t(e[s],s,e));return n?Qr(e,r?0:s,r?s+1:i):Qr(e,r?s+1:0,r?i:s)}function ii(e,t){var n=e;n instanceof In&&(n=n.value());var r=-1,i=t.length;while(++r<i){var s=t[r];n=s.func.apply(s.thisArg,sr([n],s.args))}return n}function si(e,t,n){var r=0,i=e?e.length:r;if(typeof t=="number"&&t===t&&i<=Mn){while(r<i){var s=r+i>>>1,o=e[s];(n?o<=t:o<t)&&o!==null?r=s+1:i=s}return i}return oi(e,t,qa,n)}function oi(e,t,n,i){t=n(t);var s=0,o=e?e.length:0,u=t!==t,a=t===null,f=t===r;while(s<o){var l=yn((s+o)/2),c=n(e[l]),h=c!==r,p=c===c;if(u)var d=p||i;else a?d=p&&h&&(i||c!=null):f?d=p&&(i||h):c==null?d=!1:d=i?c<=t:c<t;d?s=l+1:o=l}return xn(o,On)}function ui(e,t,n){if(typeof e!="function")return qa;if(t===r)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,r,i){return e.call(t,n,r,i)};case 4:return function(n,r,i,s){return e.call(t,n,r,i,s)};case 5:return function(n,r,i,s,o){return e.call(t,n,r,i,s,o)}}return function(){return e.apply(t,arguments)}}function ai(e){var t=new on(e.byteLength),n=new dn(t);return n.set(new dn(e)),t}function fi(e,n,r){var i=r.length,s=-1,o=Sn(e.length-i,0),u=-1,a=n.length,f=t(a+o);while(++u<a)f[u]=n[u];while(++s<i)f[r[s]]=e[s];while(o--)f[u++]=e[s++];return f}function li(e,n,r){var i=-1,s=r.length,o=-1,u=Sn(e.length-s,0),a=-1,f=n.length,l=t(u+f);while(++o<u)l[o]=e[o];var c=o;while(++a<f)l[c+a]=n[a];while(++i<s)l[c+r[i]]=e[o++];return l}function ci(e,t){return function(n,r,i){var s=t?t():{};r=Ui(r,i,3);if(mu(n)){var o=-1,u=n.length;while(++o<u){var a=n[o];e(s,a,r(a,o,n),n)}}else Er(n,function(t,n,i){e(s,t,r(t,n,i),i)});return s}}function hi(e){return uu(function(t,n){var i=-1,s=t==null?0:n.length,o=s>2?n[s-2]:r,u=s>2?n[2]:r,a=s>1?n[s-1]:r;typeof o=="function"?(o=ui(o,a,5),s-=2):(o=typeof a=="function"?a:r,s-=o?1:0),u&&ns(n[0],n[1],u)&&(o=s<3?r:o,s=1);while(++i<s){var f=n[i];f&&e(t,f,o)}return t})}function pi(e,t){return function(n,r){var i=n?Vi(n):0;if(!ss(i))return e(n,r);var s=t?i:-1,o=vs(n);while(t?s--:++s<i)if(r(o[s],s,o)===!1)break;return n}}function di(e){return function(t,n,r){var i=vs(t),s=r(t),o=s.length,u=e?o:-1;while(e?u--:++u<o){var a=s[u];if(n(i[a],a,i)===!1)break}return t}}function vi(e,t){function r(){var i=this&&this!==Pt&&this instanceof r?n:e;return i.apply(t,arguments)}var n=yi(e);return r}function mi(e){return gn&&cn?new Jn(e):null}function gi(e){return function(t){var n=-1,r=Ba(ga(t)),i=r.length,s="";while(++n<i)s=e(s,r[n],n);return s}}function yi(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=yr(e.prototype),r=e.apply(n,t);return Nu(r)?r:n}}function bi(e){function t(n,i,s){s&&ns(n,i,s)&&(i=r);var o=Fi(n,e,r,r,r,r,r,i);return o.placeholder=t.placeholder,o}return t}function wi(e,t){return uu(function(n){var i=n[0];return i==null?i:(n.push(t),e.apply(r,n))})}function Ei(e,t){return function(n,i,s){s&&ns(n,i,s)&&(i=r),i=Ui(i,s,3);if(i.length==1){n=mu(n)?n:ds(n);var o=nr(n,i,e,t);if(!n.length||o!==t)return o}return Tr(n,i,e,t)}}function Si(e,t){return function(n,i,s){i=Ui(i,s,3);if(mu(n)){var o=Bt(n,i,t);return o>-1?n[o]:r}return kr(n,i,e)}}function xi(e){return function(t,n,r){return!t||!t.length?-1:(n=Ui(n,r,3),Bt(t,n,e))}}function Ti(e){return function(t,n,r){return n=Ui(n,r,3),kr(t,n,e,!0)}}function Ni(e){return function(){var n,i=arguments.length,s=e?i:-1,o=0,u=t(i);while(e?s--:++s<i){var f=u[o++]=arguments[s];if(typeof f!="function")throw new Ct(E);!n&&jn.prototype.thru&&Wi(f)=="wrapper"&&(n=new jn([],!0))}s=n?-1:i;while(++s<i){f=u[s];var c=Wi(f),d=c=="wrapper"?zi(f):r;d&&is(d[0])&&d[1]==(h|a|l|p)&&!d[4].length&&d[9]==1?n=n[Wi(d[0])].apply(n,d[3]):n=f.length==1&&is(f)?n[c]():n.thru(f)}return function(){var e=arguments,t=e[0];if(n&&e.length==1&&mu(t)&&t.length>=y)return n.plant(t).value();var r=0,s=i?u[r].apply(this,e):t;while(++r<i)s=u[r].call(this,s);return s}}}function Ci(e,t){return function(n,i,s){return typeof i=="function"&&s===r&&mu(n)?e(n,i):t(n,ui(i,s,3))}}function ki(e){return function(t,n,i){if(typeof n!="function"||i!==r)n=ui(n,i,3);return e(t,n,na)}}function Li(e){return function(t,n,i){if(typeof n!="function"||i!==r)n=ui(n,i,3);return e(t,n)}}function Ai(e){return function(t,n,r){var i={};return n=Ui(n,r,3),_r(t,function(t,r,s){var o=n(t,r,s);r=e?o:r,t=e?t:o,i[r]=t}),i}}function Oi(e){return function(t,n,r){return t=It(t),(e?t:"")+Pi(t,n,r)+(e?"":t)}}function Mi(e){var t=uu(function(n,i){var s=Gt(i,t.placeholder);return Fi(n,e,r,i,s)});return t}function _i(e,t){return function(n,i,s,o){var u=arguments.length<3;return typeof i=="function"&&o===r&&mu(n)?e(n,i,s,u):Jr(n,Ui(i,o,4),s,u,t)}}function Di(e,n,i,p,d,v,m,g,y,b){function k(){var u=arguments.length,a=u,f=t(u);while(a--)f[a]=arguments[a];p&&(f=fi(f,p,d)),v&&(f=li(f,v,m));if(x||N){var h=k.placeholder,L=Gt(f,h);u-=L.length;if(u<b){var A=g?Yn(g):r,O=Sn(b-u,0),M=x?L:r,_=x?r:L,D=x?f:r,P=x?r:f;n|=x?l:c,n&=~(x?c:l),T||(n&=~(s|o));var H=[e,n,i,D,M,P,_,A,y,O],B=Di.apply(r,H);return is(e)&&hs(B,H),B.placeholder=h,B}}var j=E?i:this,F=S?j[e]:e;return g&&(f=cs(f,g)),w&&y<f.length&&(f.length=y),this&&this!==Pt&&this instanceof k&&(F=C||yi(e)),F.apply(j,f)}var w=n&h,E=n&s,S=n&o,x=n&a,T=n&u,N=n&f,C=S?r:yi(e);return k}function Pi(e,t,n){var r=e.length;t=+t;if(r>=t||!wn(t))return"";var i=t-r;return n=n==null?" ":n+"",Ca(n,mn(i/n.length)).slice(0,i)}function Hi(e,n,r,i){function a(){var n=-1,s=arguments.length,f=-1,l=i.length,c=t(l+s);while(++f<l)c[f]=i[f];while(s--)c[f++]=arguments[++n];var h=this&&this!==Pt&&this instanceof a?u:e;return h.apply(o?r:this,c)}var o=n&s,u=yi(e);return a}function Bi(e){var t=H[e];return function(e,n){return n=n===r?0:+n||0,n?(n=fn(10,n),t(e*n)/n):t(e)}}function ji(e){return function(t,n,r,i){var s=Ui(r);return r==null&&s===mr?si(t,n,e):oi(t,n,s(r,i,1),e)}}function Fi(e,t,n,i,u,a,f,h){var p=t&o;if(!p&&typeof e!="function")throw new Ct(E);var d=i?i.length:0;d||(t&=~(l|c),i=u=r),d-=u?u.length:0;if(t&c){var v=i,m=u;i=u=r}var g=p?r:zi(e),y=[e,t,n,i,u,v,m,a,f,h];g&&(us(y,g),t=y[1],h=y[9]),y[9]=h==null?p?0:e.length:Sn(h-d,0)||0;if(t==s)var b=vi(y[0],y[2]);else t!=l&&t!=(s|l)||!!y[4].length?b=Di.apply(r,y):b=Hi.apply(r,y);var w=g?Kr:hs;return w(b,y)}function Ii(e,t,n,i,s,o,u){var a=-1,f=e.length,l=t.length;if(f!=l&&!(s&&l>f))return!1;while(++a<f){var c=e[a],h=t[a],p=i?i(s?h:c,s?c:h,a):r;if(p!==r){if(p)continue;return!1}if(s){if(!ar(t,function(e){return c===e||n(c,e,i,s,o,u)}))return!1}else if(c!==h&&!n(c,h,i,s,o,u))return!1}return!0}function qi(e,t,n){switch(n){case N:case C:return+e==+t;case k:return e.name==t.name&&e.message==t.message;case O:return e!=+e?t!=+t:e==+t;case _:case P:return e==t+""}return!1}function Ri(e,t,n,i,s,o,u){var a=ta(e),f=a.length,l=ta(t),c=l.length;if(f!=c&&!s)return!1;var h=f;while(h--){var p=a[h];if(!(s?p in t:Mt.call(t,p)))return!1}var d=s;while(++h<f){p=a[h];var v=e[p],m=t[p],g=i?i(s?m:v,s?v:m,p):r;if(g===r?!n(v,m,i,s,o,u):!g)return!1;d||(d=p=="constructor")}if(!d){var y=e.constructor,b=t.constructor;if(y!=b&&"constructor"in e&&"constructor"in t&&!(typeof y=="function"&&y instanceof y&&typeof b=="function"&&b instanceof b))return!1}return!0}function Ui(e,t,n){var r=Hn.callback||Fa;return r=r===Fa?mr:r,n?r(e,t,n):r}function Wi(e){var t=e.name,n=Pn[t],r=n?n.length:0;while(r--){var i=n[r],s=i.func;if(s==null||s==e)return i.name}return t}function Xi(e,t,n){var r=Hn.indexOf||Ms;return r=r===Ms?jt:r,e?r(e,t,n):r}function $i(e){var t=oa(e),n=t.length;while(n--)t[n][2]=os(t[n][1]);return t}function Ji(e,t){var n=e==null?r:e[t];return Lu(n)?n:r}function Ki(e,t,n){var r=-1,i=n.length;while(++r<i){var s=n[r],o=s.size;switch(s.type){case"drop":e+=o;break;case"dropRight":t-=o;break;case"take":t=xn(t,e+o);break;case"takeRight":e=Sn(e,t-o)}}return{start:e,end:t}}function Qi(e){var t=e.length,n=new e.constructor(t);return t&&typeof e[0]=="string"&&Mt.call(e,"index")&&(n.index=e.index,n.input=e.input),n}function Gi(e){var t=e.constructor;return typeof t=="function"&&t instanceof t||(t=xt),new t}function Yi(e,t,n){var r=e.constructor;switch(t){case B:return ai(e);case N:case C:return new r(+e);case j:case F:case I:case q:case R:case U:case z:case W:case X:var i=e.buffer;return new r(n?ai(i):i,e.byteOffset,e.length);case O:case P:return new r(e);case _:var s=new r(e.source,lt.exec(e));s.lastIndex=e.lastIndex}return s}function Zi(e,t,n){e!=null&&!rs(t,e)&&(t=ms(t),e=t.length==1?e:Hr(e,Qr(t,0,-1)),t=Ps(t));var i=e==null?e:e[t];return i==null?r:i.apply(e,n)}function es(e){return e!=null&&ss(Vi(e))}function ts(e,t){return e=typeof e=="number"||pt.test(e)?+e:-1,t=t==null?_n:t,e>-1&&e%1==0&&e<t}function ns(e,t,n){if(!Nu(n))return!1;var r=typeof t;if(r=="number"?es(n)&&ts(t,n.length):r=="string"&&t in n){var i=n[t];return e===e?e===i:i!==i}return!1}function rs(e,t){var n=typeof e;if(n=="string"&&rt.test(e)||n=="number")return!0;if(mu(e))return!1;var r=!nt.test(e);return r||t!=null&&e in vs(t)}function is(e){var t=Wi(e);if(t in In.prototype){var n=Hn[t];if(e===n)return!0;var r=zi(n);return!!r&&e===r[0]}return!1}function ss(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=_n}function os(e){return e===e&&!Nu(e)}function us(e,t){var n=e[1],r=t[1],i=n|r,o=i<h,f=r==h&&n==a||r==h&&n==p&&e[7].length<=t[8]||r==(h|p)&&n==a;if(!o&&!f)return e;r&s&&(e[2]=t[2],i|=n&s?0:u);var l=t[3];if(l){var c=e[3];e[3]=c?fi(c,l,t[4]):Yn(l),e[4]=c?Gt(e[3],S):Yn(t[4])}return l=t[5],l&&(c=e[5],e[5]=c?li(c,l,t[6]):Yn(l),e[6]=c?Gt(e[5],S):Yn(t[6])),l=t[7],l&&(e[7]=Yn(l)),r&h&&(e[8]=e[8]==null?t[8]:xn(e[8],t[8])),e[9]==null&&(e[9]=t[9]),e[0]=t[0],e[1]=i,e}function as(e,t){return e===r?t:qu(e,t,as)}function fs(e,t){e=vs(e);var n=-1,r=t.length,i={};while(++n<r){var s=t[n];s in e&&(i[s]=e[s])}return i}function ls(e,t){var n={};return Mr(e,function(e,r,i){t(e,r,i)&&(n[r]=e)}),n}function cs(e,t){var n=e.length,i=xn(t.length,n),s=Yn(e);while(i--){var o=t[i];e[i]=ts(o,n)?s[o]:r}return e}function ps(e){var t=na(e),n=t.length,r=n&&e.length,i=!!r&&ss(r)&&(mu(e)||vu(e)),s=-1,o=[];while(++s<n){var u=t[s];(i&&ts(u,r)||Mt.call(e,u))&&o.push(u)}return o}function ds(e){return e==null?[]:es(e)?Nu(e)?e:xt(e):ca(e)}function vs(e){return Nu(e)?e:xt(e)}function ms(e){if(mu(e))return e;var t=[];return It(e).replace(it,function(e,n,r,i){t.push(r?i.replace(at,"$1"):n||e)}),t}function gs(e){return e instanceof In?e.clone():new jn(e.__wrapped__,e.__chain__,Yn(e.__actions__))}function ys(e,n,r){(r?ns(e,n,r):n==null)?n=1:n=Sn(yn(n)||1,1);var i=0,s=e?e.length:0,o=-1,u=t(mn(s/n));while(i<s)u[++o]=Qr(e,i,i+=n);return u}function bs(e){var t=-1,n=e?e.length:0,r=-1,i=[];while(++t<n){var s=e[t];s&&(i[++r]=s)}return i}function Es(e,t,n){var r=e?e.length:0;if(!r)return[];if(n?ns(e,t,n):t==null)t=1;return Qr(e,t<0?0:t)}function Ss(e,t,n){var r=e?e.length:0;if(!r)return[];if(n?ns(e,t,n):t==null)t=1;return t=r-(+t||0),Qr(e,0,t<0?0:t)}function xs(e,t,n){return e&&e.length?ri(e,Ui(t,n,3),!0,!0):[]}function Ts(e,t,n){return e&&e.length?ri(e,Ui(t,n,3),!0):[]}function Ns(e,t,n,r){var i=e?e.length:0;return i?(n&&typeof n!="number"&&ns(e,t,n)&&(n=0,r=i),Nr(e,t,n,r)):[]}function Ls(e){return e?e[0]:r}function As(e,t,n){var r=e?e.length:0;return n&&ns(e,t,n)&&(t=!1),r?Lr(e,t):[]}function Os(e){var t=e?e.length:0;return t?Lr(e,!0):[]}function Ms(e,t,n){var r=e?e.length:0;if(!r)return-1;if(typeof n=="number")n=n<0?Sn(r+n,0):n;else if(n){var i=si(e,t);return i<r&&(t===t?t===e[i]:e[i]!==e[i])?i:-1}return jt(e,t,n||0)}function _s(e){return Ss(e,1)}function Ps(e){var t=e?e.length:0;return t?e[t-1]:r}function Hs(e,t,n){var r=e?e.length:0;if(!r)return-1;var i=r;if(typeof n=="number")i=(n<0?Sn(r+n,0):xn(n||0,r-1))+1;else if(n){i=si(e,t,!0)-1;var s=e[i];return(t===t?t===s:s!==s)?i:-1}if(t!==t)return Jt(e,i,!0);while(i--)if(e[i]===t)return i;return-1}function Bs(){var e=arguments,t=e[0];if(!t||!t.length)return t;var n=0,r=Xi(),i=e.length;while(++n<i){var s=0,o=e[n];while((s=r(t,o,s))>-1)pn.call(t,s,1)}return t}function Fs(e,t,n){var r=[];if(!e||!e.length)return r;var i=-1,s=[],o=e.length;t=Ui(t,n,3);while(++i<o){var u=e[i];t(u,i,e)&&(r.push(u),s.push(i))}return Vr(e,s),r}function Is(e){return Es(e,1)}function qs(e,t,n){var r=e?e.length:0;return r?(n&&typeof n!="number"&&ns(e,t,n)&&(t=0,n=r),Qr(e,t,n)):[]}function zs(e,t,n){var r=e?e.length:0;if(!r)return[];if(n?ns(e,t,n):t==null)t=1;return Qr(e,0,t<0?0:t)}function Ws(e,t,n){var r=e?e.length:0;if(!r)return[];if(n?ns(e,t,n):t==null)t=1;return t=r-(+t||0),Qr(e,t<0?0:t)}function Xs(e,t,n){return e&&e.length?ri(e,Ui(t,n,3),!1,!0):[]}function Vs(e,t,n){return e&&e.length?ri(e,Ui(t,n,3)):[]}function Js(e,t,n,i){var s=e?e.length:0;if(!s)return[];t!=null&&typeof t!="boolean"&&(i=n,n=ns(e,t,i)?r:t,t=!1);var o=Ui();if(n!=null||o!==mr)n=o(n,i,3);return t&&Xi()==jt?Yt(e,n):ti(e,n)}function Ks(e){if(!e||!e.length)return[];var n=-1,r=0;e=rr(e,function(e){if(es(e))return r=Sn(e.length,r),!0});var i=t(r);while(++n<r)i[n]=ir(e,Wr(n));return i}function Qs(e,t,n){var i=e?e.length:0;if(!i)return[];var s=Ks(e);return t==null?s:(t=ui(t,n,4),ir(s,function(e){return or(e,t,r,!0)}))}function Ys(){var e=-1,t=arguments.length;while(++e<t){var n=arguments[e];if(es(n))var r=r?sr(wr(r,n),wr(n,r)):n}return r?ti(r):[]}function eo(e,t){var n=-1,r=e?e.length:0,i={};r&&!t&&!mu(e[0])&&(t=[]);while(++n<r){var s=e[n];t?i[s]=t[n]:s&&(i[s[0]]=s[1])}return i}function no(e){var t=Hn(e);return t.__chain__=!0,t}function ro(e,t,n){return t.call(n,e),e}function io(e,t,n){return t.call(n,e)}function so(){return no(this)}function oo(){return new jn(this.value(),this.__chain__)}function ao(e){var t,n=this;while(n instanceof Bn){var r=gs(n);t?i.__wrapped__=r:t=r;var i=r;n=n.__wrapped__}return i.__wrapped__=e,t}function fo(){var e=this.__wrapped__,t=function(e){return n&&n.__dir__<0?e:e.reverse()};if(e instanceof In){var n=e;return this.__actions__.length&&(n=new In(this)),n=n.reverse(),n.__actions__.push({func:io,args:[t],thisArg:r}),new jn(n,this.__chain__)}return this.thru(t)}function lo(){return this.value()+""}function co(){return ii(this.__wrapped__,this.__actions__)}function vo(e,t,n){var i=mu(e)?tr:xr;n&&ns(e,t,n)&&(t=r);if(typeof t!="function"||n!==r)t=Ui(t,n,3);return i(e,t)}function mo(e,t,n){var r=mu(e)?rr:Cr;return t=Ui(t,n,3),r(e,t)}function bo(e,t){return go(e,qr(t))}function xo(e,t,n,r){var i=e?Vi(e):0;return ss(i)||(e=ca(e),i=e.length),typeof n!="number"||r&&ns(t,n,r)?n=0:n=n<0?Sn(i+n,0):n||0,typeof e=="string"||!mu(e)&&Du(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&Xi(e,t,n)>-1}function Co(e,t,n){var r=mu(e)?ir:Ir;return t=Ui(t,n,3),r(e,t)}function Lo(e,t){return Co(e,Ja(t))}function Mo(e,t,n){var r=mu(e)?rr:Cr;return t=Ui(t,n,3),r(e,function(e,n,r){return!t(e,n,r)})}function _o(e,t,n){if(n?ns(e,t,n):t==null){e=ds(e);var i=e.length;return i>0?e[$r(0,i-1)]:r}var s=-1,o=Fu(e),i=o.length,u=i-1;t=xn(t<0?0:+t||0,i);while(++s<t){var a=$r(s,u),f=o[a];o[a]=o[s],o[s]=f}return o.length=t,o}function Do(e){return _o(e,Ln)}function Po(e){var t=e?Vi(e):0;return ss(t)?t:ta(e).length}function Ho(e,t,n){var i=mu(e)?ar:Gr;n&&ns(e,t,n)&&(t=r);if(typeof t!="function"||n!==r)t=Ui(t,n,3);return i(e,t)}function Bo(e,t,n){if(e==null)return[];n&&ns(e,t,n)&&(t=r);var i=-1;t=Ui(t,n,3);var s=Ir(e,function(e,n,r){return{criteria:t(e,n,r),index:++i,value:e}});return Yr(s,Ut)}function Fo(e,t,n,i){return e==null?[]:(i&&ns(t,n,i)&&(n=r),mu(t)||(t=t==null?[]:[t]),mu(n)||(n=n==null?[]:[n]),Zr(e,t,n))}function Io(e,t){return mo(e,qr(t))}function Ro(e,t){if(typeof t!="function"){if(typeof e!="function")throw new Ct(E);var n=e;e=t,t=n}return e=wn(e=+e)?e:0,function(){if(--e<1)return t.apply(this,arguments)}}function Uo(e,t,n){return n&&ns(e,t,n)&&(t=r),t=e&&t==null?e.length:Sn(+t||0,0),Fi(e,h,r,r,r,r,t)}function zo(e,t){var n;if(typeof t!="function"){if(typeof e!="function")throw new Ct(E);var i=e;e=t,t=i}return function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=r),n}}function Ko(e,t,n){function v(){f&&un(f),s&&un(s),c=0,s=f=l=r}function m(t,n){n&&un(n),s=f=l=r,t&&(c=qo(),o=e.apply(a,i),!f&&!s&&(i=a=r))}function g(){var e=t-(qo()-u);e<=0||e>t?m(l,s):f=hn(g,e)}function y(){m(p,f)}function b(){i=arguments,u=qo(),a=this,l=p&&(f||!d);if(h===!1)var n=d&&!f;else{!s&&!d&&(c=u);var v=h-(u-c),m=v<=0||v>h;m?(s&&(s=un(s)),c=u,o=e.apply(a,i)):s||(s=hn(y,v))}return m&&f?f=un(f):!f&&t!==h&&(f=hn(g,t)),n&&(m=!0,o=e.apply(a,i)),m&&!f&&!s&&(i=a=r),o}var i,s,o,u,a,f,l,c=0,h=!1,p=!0;if(typeof e!="function")throw new Ct(E);t=t<0?0:+t||0;if(n===!0){var d=!0;p=!1}else Nu(n)&&(d=!!n.leading,h="maxWait"in n&&Sn(+n.maxWait||0,t),p="trailing"in n?!!n.trailing:p);return b.cancel=v,b}function eu(e,t){if(typeof e!="function"||t&&typeof t!="function")throw new Ct(E);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],s=n.cache;if(s.has(i))return s.get(i);var o=e.apply(this,r);return n.cache=s.set(i,o),o};return n.cache=new eu.Cache,n}function nu(e){if(typeof e!="function")throw new Ct(E);return function(){return!e.apply(this,arguments)}}function ru(e){return zo(2,e)}function uu(e,n){if(typeof e!="function")throw new Ct(E);return n=Sn(n===r?e.length-1:+n||0,0),function(){var r=arguments,i=-1,s=Sn(r.length-n,0),o=t(s);while(++i<s)o[i]=r[n+i];switch(n){case 0:return e.call(this,o);case 1:return e.call(this,r[0],o);case 2:return e.call(this,r[0],r[1],o)}var u=t(n+1);i=-1;while(++i<n)u[i]=r[i];return u[n]=o,e.apply(this,u)}}function au(e){if(typeof e!="function")throw new Ct(E);return function(t){return e.apply(this,t)}}function fu(e,t,n){var r=!0,i=!0;if(typeof e!="function")throw new Ct(E);return n===!1?r=!1:Nu(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ko(e,t,{leading:r,maxWait:+t,trailing:i})}function lu(e,t){return t=t==null?qa:t,Fi(t,l,r,[e],[])}function cu(e,t,n,r){return t&&typeof t!="boolean"&&ns(e,t,n)?t=!1:typeof t=="function"&&(r=n,n=t,t=!1),typeof n=="function"?gr(e,t,ui(n,r,1)):gr(e,t)}function hu(e,t,n){return typeof t=="function"?gr(e,!0,ui(t,n,1)):gr(e,!0)}function pu(e,t){return e>t}function du(e,t){return e>=t}function vu(e){return Kt(e)&&es(e)&&Mt.call(e,"callee")&&!ln.call(e,"callee")}function gu(e){return e===!0||e===!1||Kt(e)&&Dt.call(e)==N}function yu(e){return Kt(e)&&Dt.call(e)==C}function bu(e){return!!e&&e.nodeType===1&&Kt(e)&&!Mu(e)}function wu(e){return e==null?!0:es(e)&&(mu(e)||Du(e)||vu(e)||Kt(e)&&Tu(e.splice))?!e.length:!ta(e).length}function Eu(e,t,n,i){n=typeof n=="function"?ui(n,i,3):r;var s=n?n(e,t):r;return s===r?Br(e,t,n):!!s}function Su(e){return Kt(e)&&typeof e.message=="string"&&Dt.call(e)==k}function xu(e){return typeof e=="number"&&wn(e)}function Tu(e){return Nu(e)&&Dt.call(e)==L}function Nu(e){var t=typeof e;return!!e&&(t=="object"||t=="function")}function Cu(e,t,n,i){return n=typeof n=="function"?ui(n,i,3):r,Fr(e,$i(t),n)}function ku(e){return Ou(e)&&e!=+e}function Lu(e){return e==null?!1:Tu(e)?sn.test(Ot.call(e)):Kt(e)&&ht.test(e)}function Au(e){return e===null}function Ou(e){return typeof e=="number"||Kt(e)&&Dt.call(e)==O}function Mu(e){var t;if(!Kt(e)||Dt.call(e)!=M||!!vu(e)||!Mt.call(e,"constructor")&&(t=e.constructor,typeof t=="function"&&!(t instanceof t)))return!1;var n;return Mr(e,function(e,t){n=t}),n===r||Mt.call(e,n)}function _u(e){return Nu(e)&&Dt.call(e)==_}function Du(e){return typeof e=="string"||Kt(e)&&Dt.call(e)==P}function Pu(e){return Kt(e)&&ss(e.length)&&!!wt[Dt.call(e)]}function Hu(e){return e===r}function Bu(e,t){return e<t}function ju(e,t){return e<=t}function Fu(e){var t=e?Vi(e):0;return ss(t)?t?Yn(e):[]:ca(e)}function Iu(e){return vr(e,na(e))}function Uu(e,t,n){var i=yr(e);return n&&ns(e,t,n)&&(t=r),t?pr(i,t):i}function Gu(e){return Pr(e,na(e))}function Yu(e,t,n){var i=e==null?r:Hr(e,ms(t),t+"");return i===r?n:i}function Zu(e,t){if(e==null)return!1;var n=Mt.call(e,t);if(!n&&!rs(t)){t=ms(t),e=t.length==1?e:Hr(e,Qr(t,0,-1));if(e==null)return!1;t=Ps(t),n=Mt.call(e,t)}return n||ss(e.length)&&ts(t,e.length)&&(mu(e)||vu(e))}function ea(e,t,n){n&&ns(e,t,n)&&(t=r);var i=-1,s=ta(e),o=s.length,u={};while(++i<o){var a=s[i],f=e[a];t?Mt.call(u,f)?u[f].push(a):u[f]=[a]:u[f]=a}return u}function na(e){if(e==null)return[];Nu(e)||(e=xt(e));var n=e.length;n=n&&ss(n)&&(mu(e)||vu(e))&&n||0;var r=e.constructor,i=-1,s=typeof r=="function"&&r.prototype===e,o=t(n),u=n>0;while(++i<n)o[i]=i+"";for(var a in e)(!u||!ts(a,n))&&(a!="constructor"||!s&&!!Mt.call(e,a))&&o.push(a);return o}function oa(e){e=vs(e);var n=-1,r=ta(e),i=r.length,s=t(i);while(++n<i){var o=r[n];s[n]=[o,e[o]]}return s}function aa(e,t,n){var i=e==null?r:e[t];return i===r&&(e!=null&&!rs(t,e)&&(t=ms(t),e=t.length==1?e:Hr(e,Qr(t,0,-1)),i=e==null?r:e[Ps(t)]),i=i===r?n:i),Tu(i)?i.call(e):i}function fa(e,t,n){if(e==null)return e;var r=t+"";t=e[r]!=null||rs(t,e)?[r]:ms(t);var i=-1,s=t.length,o=s-1,u=e;while(u!=null&&++i<s){var a=t[i];Nu(u)&&(i==o?u[a]=n:u[a]==null&&(u[a]=ts(t[i+1])?[]:{})),u=u[a]}return e}function la(e,t,n,i){var s=mu(e)||Pu(e);t=Ui(t,i,4);if(n==null)if(s||Nu(e)){var o=e.constructor;s?n=mu(e)?new o:[]:n=yr(Tu(o)?o.prototype:r)}else n={};return(s?Zn:_r)(e,function(e,r,i){return t(n,e,r,i)}),n}function ca(e){return ni(e,ta(e))}function ha(e){return ni(e,na(e))}function pa(e,t,n){return t=+t||0,n===r?(n=t,t=0):n=+n||0,e>=xn(t,n)&&e<Sn(t,n)}function da(e,t,n){n&&ns(e,t,n)&&(t=n=r);var i=e==null,s=t==null;n==null&&(s&&typeof e=="boolean"?(n=e,e=1):typeof t=="boolean"&&(n=t,s=!0)),i&&s&&(t=1,s=!1),e=+e||0,s?(t=e,e=0):t=+t||0;if(n||e%1||t%1){var o=Cn();return xn(e+o*(t-e+an("1e-"+((o+"").length-1))),t)}return $r(e,t)}function ma(e){return e=It(e),e&&e.charAt(0).toUpperCase()+e.slice(1)}function ga(e){return e=It(e),e&&e.replace(dt,Wt).replace(ut,"")}function ya(e,t,n){e=It(e),t+="";var i=e.length;return n=n===r?i:xn(n<0?0:+n||0,i),n-=t.length,n>=0&&e.indexOf(t,n)==n}function ba(e){return e=It(e),e&&Y.test(e)?e.replace(Q,Xt):e}function wa(e){return e=It(e),e&&ot.test(e)?e.replace(st,Vt):e||"(?:)"}function Sa(e,t,n){e=It(e),t=+t;var r=e.length;if(r>=t||!wn(t))return e;var i=(t-r)/2,s=yn(i),o=mn(i);return n=Pi("",o,n),n.slice(0,s)+e+n}function Na(e,t,n){return(n?ns(e,t,n):t==null)?t=0:t&&(t=+t),e=Ma(e),Nn(e,t||(ct.test(e)?16:10))}function Ca(e,t){var n="";e=It(e),t=+t;if(t<1||!e||!wn(t))return n;do t%2&&(n+=e),t=yn(t/2),e+=e;while(t);return n}function Aa(e,t,n){return e=It(e),n=n==null?0:xn(n<0?0:+n||0,e.length),e.lastIndexOf(t,n)==n}function Oa(e,t,n){var i=Hn.templateSettings;n&&ns(e,t,n)&&(t=n=r),e=It(e),t=hr(pr({},n||t),i,cr);var s=hr(pr({},t.imports),i.imports,cr),o=ta(s),u=ni(s,o),a,f,l=0,c=t.interpolate||vt,h="__p += '",p=Tt((t.escape||vt).source+"|"+c.source+"|"+(c===tt?ft:vt).source+"|"+(t.evaluate||vt).source+"|$","g"),d="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++bt+"]")+"\n";e.replace(p,function(t,n,r,i,s,o){return r||(r=i),h+=e.slice(l,o).replace(mt,$t),n&&(a=!0,h+="' +\n__e("+n+") +\n'"),s&&(f=!0,h+="';\n"+s+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=o+t.length,t}),h+="';\n";var v=t.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(f?h.replace(V,""):h).replace($,"$1").replace(J,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(a?", __e = _.escape":"")+(f?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var m=ja(function(){return D(o,d+"return "+h).apply(r,u)});m.source=h;if(Su(m))throw m;return m}function Ma(e,t,n){var r=e;return e=It(e),e?(n?ns(r,t,n):t==null)?e.slice(Zt(e),en(e)+1):(t+="",e.slice(qt(e,t),Rt(e,t)+1)):e}function _a(e,t,n){var r=e;return e=It(e),e?(n?ns(r,t,n):t==null)?e.slice(Zt(e)):e.slice(qt(e,t+"")):e}function Da(e,t,n){var r=e;return e=It(e),e?(n?ns(r,t,n):t==null)?e.slice(0,en(e)+1):e.slice(0,Rt(e,t+"")+1):e}function Pa(e,t,n){n&&ns(e,t,n)&&(t=r);var i=d,s=v;if(t!=null)if(Nu(t)){var o="separator"in t?t.separator:o;i="length"in t?+t.length||0:i,s="omission"in t?It(t.omission):s}else i=+t||0;e=It(e);if(i>=e.length)return e;var u=i-s.length;if(u<1)return s;var a=e.slice(0,u);if(o==null)return a+s;if(_u(o)){if(e.slice(u).search(o)){var f,l,c=e.slice(0,u);o.global||(o=Tt(o.source,(lt.exec(o)||"")+"g")),o.lastIndex=0;while(f=o.exec(c))l=f.index;a=a.slice(0,l==null?u:l)}}else if(e.indexOf(o,u)!=u){var h=a.lastIndexOf(o);h>-1&&(a=a.slice(0,h))}return a+s}function Ha(e){return e=It(e),e&&G.test(e)?e.replace(K,tn):e}function Ba(e,t,n){return n&&ns(e,t,n)&&(t=r),e=It(e),e.match(t||gt)||[]}function Fa(e,t,n){return n&&ns(e,t,n)&&(t=r),Kt(e)?Ra(e):mr(e,t)}function Ia(e){return function(){return e}}function qa(e){return e}function Ra(e){return qr(gr(e,!0))}function Ua(e,t){return Rr(e,gr(t,!0))}function Xa(e,t,n){if(n==null){var i=Nu(t),s=i?ta(t):r,o=s&&s.length?Pr(t,s):r;if(o?!o.length:!i)o=!1,n=t,t=e,e=this}o||(o=Pr(t,ta(t)));var u=!0,a=-1,f=Tu(e),l=o.length;n===!1?u=!1:Nu(n)&&"chain"in n&&(u=n.chain);while(++a<l){var c=o[a],h=t[c];e[c]=h,f&&(e.prototype[c]=function(t){return function(){var n=this.__chain__;if(u||n){var r=e(this.__wrapped__),i=r.__actions__=Yn(this.__actions__);return i.push({func:t,args:arguments,thisArg:e}),r.__chain__=n,r}return t.apply(e,sr([this.value()],arguments))}}(h))}return e}function Va(){return Pt._=Qt,this}function $a(){}function Ja(e){return rs(e)?Wr(e):Xr(e)}function Ka(e){return function(t){return Hr(e,ms(t),t+"")}}function Qa(e,n,i){i&&ns(e,n,i)&&(n=i=r),e=+e||0,i=i==null?1:+i||0,n==null?(n=e,e=0):n=+n||0;var s=-1,o=Sn(mn((n-e)/(i||1)),0),u=t(o);while(++s<o)u[s]=e,e+=i;return u}function Ga(e,n,r){e=yn(e);if(e<1||!wn(e))return[];var i=-1,s=t(xn(e,An));n=ui(n,r,1);while(++i<e)i<An?s[i]=n(i):n(i);return s}function Ya(e){var t=++_t;return It(e)+t}function Za(e,t){return(+e||0)+(+t||0)}function of(e,t,n){return n&&ns(e,t,n)&&(t=r),t=Ui(t,n,3),t.length==1?fr(mu(e)?e:ds(e),t):ei(e,t)}e=e?rn.defaults(Pt.Object(),e,rn.pick(Pt,yt)):Pt;var t=e.Array,n=e.Date,A=e.Error,D=e.Function,H=e.Math,St=e.Number,xt=e.Object,Tt=e.RegExp,Nt=e.String,Ct=e.TypeError,kt=t.prototype,Lt=xt.prototype,At=Nt.prototype,Ot=D.prototype.toString,Mt=Lt.hasOwnProperty,_t=0,Dt=Lt.toString,Qt=Pt._,sn=Tt("^"+Ot.call(Mt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),on=e.ArrayBuffer,un=e.clearTimeout,an=e.parseFloat,fn=H.pow,ln=Lt.propertyIsEnumerable,cn=Ji(e,"Set"),hn=e.setTimeout,pn=kt.splice,dn=e.Uint8Array,vn=Ji(e,"WeakMap"),mn=H.ceil,gn=Ji(xt,"create"),yn=H.floor,bn=Ji(t,"isArray"),wn=e.isFinite,En=Ji(xt,"keys"),Sn=H.max,xn=H.min,Tn=Ji(n,"now"),Nn=e.parseInt,Cn=H.random,kn=St.NEGATIVE_INFINITY,Ln=St.POSITIVE_INFINITY,An=4294967295,On=An-1,Mn=An>>>1,_n=9007199254740991,Dn=vn&&new vn,Pn={},Fn=Hn.support={};Hn.templateSettings={escape:Z,evaluate:et,interpolate:tt,variable:"",imports:{_:Hn}};var yr=function(){function e(){}return function(t){if(Nu(t)){e.prototype=t;var n=new e;e.prototype=r}return n||{}}}(),Er=pi(_r),Sr=pi(Dr,!0),Ar=di(),Or=di(!0),Kr=Dn?function(e,t){return Dn.set(e,t),e}:qa,zi=Dn?function(e){return Dn.get(e)}:$a,Vi=Wr("length"),hs=function(){var e=0,t=0;return function(n,r){var i=qo(),s=g-(i-t);t=i;if(s>0){if(++e>=m)return n}else e=0;return Kr(n,r)}}(),ws=uu(function(e,t){return Kt(e)&&es(e)?wr(e,Lr(t,!1,!0)):[]}),Cs=xi(),ks=xi(!0),Ds=uu(function(e){var n=e.length,r=n,i=t(c),s=Xi(),o=s==jt,u=[];while(r--){var a=e[r]=es(a=e[r])?a:[];i[r]=o&&a.length>=120?mi(r&&a):null}var f=e[0],l=-1,c=f?f.length:0,h=i[0];e:while(++l<c){a=f[l];if((h?Kn(h,a):s(u,a,0))<0){var r=n;while(--r){var p=i[r];if((p?Kn(p,a):s(e[r],a,0))<0)continue e}h&&h.push(a),u.push(a)}}return u}),js=uu(function(e,t){t=Lr(t);var n=dr(e,t);return Vr(e,t.sort(Ht)),n}),Rs=ji(),Us=ji(!0),$s=uu(function(e){return ti(Lr(e,!1,!0))}),Gs=uu(function(e,t){return es(e)?wr(e,t):[]}),Zs=uu(Ks),to=uu(function(e){var t=e.length,n=t>2?e[t-2]:r,i=t>1?e[t-1]:r;return t>2&&typeof n=="function"?t-=2:(n=t>1&&typeof i=="function"?(--t,i):r,i=r),e.length=t,Qs(e,n,i)}),uo=uu(function(e){return e=Lr(e),this.thru(function(t){return Gn(mu(t)?t:[vs(t)],e)})}),ho=uu(function(e,t){return dr(e,Lr(t))}),po=ci(function(e,t,n){Mt.call(e,n)?++e[n]:e[n]=1}),go=Si(Er),yo=Si(Sr,!0),wo=Ci(Zn,Er),Eo=Ci(er,Sr),So=ci(function(e,t,n){Mt.call(e,n)?e[n].push(t):e[n]=[t]}),To=ci(function(e,t,n){e[n]=t}),No=uu(function(e,n,i){var s=-1,o=typeof n=="function",u=rs(n),a=es(e)?t(e.length):[];return Er(e,function(e){var t=o?n:u&&e!=null?e[n]:r;a[++s]=t?t.apply(e,i):Zi(e,n,i)}),a}),ko=ci(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]}),Ao=_i(or,Er),Oo=_i(ur,Sr),jo=uu(function(e,t){if(e==null)return[];var n=t[2];return n&&ns(t[0],t[1],n)&&(t.length=1),Zr(e,Lr(t),[])}),qo=Tn||function(){return(new n).getTime()},Wo=uu(function(e,t,n){var r=s;if(n.length){var i=Gt(n,Wo.placeholder);r|=l}return Fi(e,r,t,n,i)}),Xo=uu(function(e,t){t=t.length?Lr(t):Gu(e);var n=-1,r=t.length;while(++n<r){var i=t[n];e[i]=Fi(e[i],s,e)}return e}),Vo=uu(function(e,t,n){var r=s|o;if(n.length){var i=Gt(n,Vo.placeholder);r|=l}return Fi(t,r,e,n,i)}),$o=bi(a),Jo=bi(f),Qo=uu(function(e,t){return br(e,1,t)}),Go=uu(function(e,t,n){return br(e,t,n)}),Yo=Ni(),Zo=Ni(!0),tu=uu(function(e,t){t=Lr(t);if(typeof e!="function"||!tr(t,Ft))throw new Ct(E);var n=t.length;return uu(function(r){var i=xn(r.length,n);while(i--)r[i]=t[i](r[i]);return e.apply(this,r)})}),iu=Mi(l),su=Mi(c),ou=uu(function(e,t){return Fi(e,p,r,r,r,Lr(t))}),mu=bn||function(e){return Kt(e)&&ss(e.length)&&Dt.call(e)==T},qu=hi(Ur),Ru=hi(function(e,t,n){return n?hr(e,t,n):pr(e,t)}),zu=wi(Ru,lr),Wu=wi(qu,as),Xu=Ti(_r),Vu=Ti(Dr),$u=ki(Ar),Ju=ki(Or),Ku=Li(_r),Qu=Li(Dr),ta=En?function(e){var t=e==null?r:e.constructor;return typeof t=="function"&&t.prototype===e||typeof e!="function"&&es(e)?ps(e):Nu(e)?En(e):[]}:ps,ra=Ai(!0),ia=Ai(),sa=uu(function(e,t){if(e==null)return{};if(typeof t[0]!="function"){var t=ir(Lr(t),Nt);return fs(e,wr(na(e),t))}var n=ui(t[0],t[1],3);return ls(e,function(e,t,r){return!n(e,t,r)})}),ua=uu(function(e,t){return e==null?{}:typeof t[0]=="function"?ls(e,ui(t[0],t[1],3)):fs(e,Lr(t))}),va=gi(function(e,t,n){return t=t.toLowerCase(),e+(n?t.charAt(0).toUpperCase()+t.slice(1):t)}),Ea=gi(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),xa=Oi(),Ta=Oi(!0),ka=gi(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}),La=gi(function(e,t,n){return e+(n?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),ja=uu(function(e,t){try{return e.apply(r,t)}catch(n){return Su(n)?n:new A(n)}}),za=uu(function(e,t){return function(n){return Zi(n,e,t)}}),Wa=uu(function(e,t){return function(n){return Zi(e,n,t)}}),ef=Bi("ceil"),tf=Bi("floor"),nf=Ei(pu,kn),rf=Ei(Bu,Ln),sf=Bi("round");return Hn.prototype=Bn.prototype,jn.prototype=yr(Bn.prototype),jn.prototype.constructor=jn,In.prototype=yr(Bn.prototype),In.prototype.constructor=In,zn.prototype["delete"]=Wn,zn.prototype.get=Xn,zn.prototype.has=Vn,zn.prototype.set=$n,Jn.prototype.push=Qn,eu.Cache=zn,Hn.after=Ro,Hn.ary=Uo,Hn.assign=Ru,Hn.at=ho,Hn.before=zo,Hn.bind=Wo,Hn.bindAll=Xo,Hn.bindKey=Vo,Hn.callback=Fa,Hn.chain=no,Hn.chunk=ys,Hn.compact=bs,Hn.constant=Ia,Hn.countBy=po,Hn.create=Uu,Hn.curry=$o,Hn.curryRight=Jo,Hn.debounce=Ko,Hn.defaults=zu,Hn.defaultsDeep=Wu,Hn.defer=Qo,Hn.delay=Go,Hn.difference=ws,Hn.drop=Es,Hn.dropRight=Ss,Hn.dropRightWhile=xs,Hn.dropWhile=Ts,Hn.fill=Ns,Hn.filter=mo,Hn.flatten=As,Hn.flattenDeep=Os,Hn.flow=Yo,Hn.flowRight=Zo,Hn.forEach=wo,Hn.forEachRight=Eo,Hn.forIn=$u,Hn.forInRight=Ju,Hn.forOwn=Ku,Hn.forOwnRight=Qu,Hn.functions=Gu,Hn.groupBy=So,Hn.indexBy=To,Hn.initial=_s,Hn.intersection=Ds,Hn.invert=ea,Hn.invoke=No,Hn.keys=ta,Hn.keysIn=na,Hn.map=Co,Hn.mapKeys=ra,Hn.mapValues=ia,Hn.matches=Ra,Hn.matchesProperty=Ua,Hn.memoize=eu,Hn.merge=qu,Hn.method=za,Hn.methodOf=Wa,Hn.mixin=Xa,Hn.modArgs=tu,Hn.negate=nu,Hn.omit=sa,Hn.once=ru,Hn.pairs=oa,Hn.partial=iu,Hn.partialRight=su,Hn.partition=ko,Hn.pick=ua,Hn.pluck=Lo,Hn.property=Ja,Hn.propertyOf=Ka,Hn.pull=Bs,Hn.pullAt=js,Hn.range=Qa,Hn.rearg=ou,Hn.reject=Mo,Hn.remove=Fs,Hn.rest=Is,Hn.restParam=uu,Hn.set=fa,Hn.shuffle=Do,Hn.slice=qs,Hn.sortBy=Bo,Hn.sortByAll=jo,Hn.sortByOrder=Fo,Hn.spread=au,Hn.take=zs,Hn.takeRight=Ws,Hn.takeRightWhile=Xs,Hn.takeWhile=Vs,Hn.tap=ro,Hn.throttle=fu,Hn.thru=io,Hn.times=Ga,Hn.toArray=Fu,Hn.toPlainObject=Iu,Hn.transform=la,Hn.union=$s,Hn.uniq=Js,Hn.unzip=Ks,Hn.unzipWith=Qs,Hn.values=ca,Hn.valuesIn=ha,Hn.where=Io,Hn.without=Gs,Hn.wrap=lu,Hn.xor=Ys,Hn.zip=Zs,Hn.zipObject=eo,Hn.zipWith=to,Hn.backflow=Zo,Hn.collect=Co,Hn.compose=Zo,Hn.each=wo,Hn.eachRight=Eo,Hn.extend=Ru,Hn.iteratee=Fa,Hn.methods=Gu,Hn.object=eo,Hn.select=mo,Hn.tail=Is,Hn.unique=Js,Xa(Hn,Hn),Hn.add=Za,Hn.attempt=ja,Hn.camelCase=va,Hn.capitalize=ma,Hn.ceil=ef,Hn.clone=cu,Hn.cloneDeep=hu,Hn.deburr=ga,Hn.endsWith=ya,Hn.escape=ba,Hn.escapeRegExp=wa,Hn.every=vo,Hn.find=go,Hn.findIndex=Cs,Hn.findKey=Xu,Hn.findLast=yo,Hn.findLastIndex=ks,Hn.findLastKey=Vu,Hn.findWhere=bo,Hn.first=Ls,Hn.floor=tf,Hn.get=Yu,Hn.gt=pu,Hn.gte=du,Hn.has=Zu,Hn.identity=qa,Hn.includes=xo,Hn.indexOf=Ms,Hn.inRange=pa,Hn.isArguments=vu,Hn.isArray=mu,Hn.isBoolean=gu,Hn.isDate=yu,Hn.isElement=bu,Hn.isEmpty=wu,Hn.isEqual=Eu,Hn.isError=Su,Hn.isFinite=xu,Hn.isFunction=Tu,Hn.isMatch=Cu,Hn.isNaN=ku,Hn.isNative=Lu,Hn.isNull=Au,Hn.isNumber=Ou,Hn.isObject=Nu,Hn.isPlainObject=Mu,Hn.isRegExp=_u,Hn.isString=Du,Hn.isTypedArray=Pu,Hn.isUndefined=Hu,Hn.kebabCase=Ea,Hn.last=Ps,Hn.lastIndexOf=Hs,Hn.lt=Bu,Hn.lte=ju,Hn.max=nf,Hn.min=rf,Hn.noConflict=Va,Hn.noop=$a,Hn.now=qo,Hn.pad=Sa,Hn.padLeft=xa,Hn.padRight=Ta,Hn.parseInt=Na,Hn.random=da,Hn.reduce=Ao,Hn.reduceRight=Oo,Hn.repeat=Ca,Hn.result=aa,Hn.round=sf,Hn.runInContext=nn,Hn.size=Po,Hn.snakeCase=ka,Hn.some=Ho,Hn.sortedIndex=Rs,Hn.sortedLastIndex=Us,Hn.startCase=La,Hn.startsWith=Aa,Hn.sum=of,Hn.template=Oa,Hn.trim=Ma,Hn.trimLeft=_a,Hn.trimRight=Da,Hn.trunc=Pa,Hn.unescape=Ha,Hn.uniqueId=Ya,Hn.words=Ba,Hn.all=vo,Hn.any=Ho,Hn.contains=xo,Hn.eq=Eu,Hn.detect=go,Hn.foldl=Ao,Hn.foldr=Oo,Hn.head=Ls,Hn.include=xo,Hn.inject=Ao,Xa(Hn,function(){var e={};return _r(Hn,function(t,n){Hn.prototype[n]||(e[n]=t)}),e}(),!1),Hn.sample=_o,Hn.prototype.sample=function(e){return!this.__chain__&&e==null?_o(this.value()):this.thru(function(t){return _o(t,e)})},Hn.VERSION=i,Zn(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){Hn[e].placeholder=Hn}),Zn(["drop","take"],function(e,t){In.prototype[e]=function(n){var r=this.__filtered__;if(r&&!t)return new In(this);n=n==null?1:Sn(yn(n)||0,0);var i=this.clone();return r?i.__takeCount__=xn(i.__takeCount__,n):i.__views__.push({size:n,type:e+(i.__dir__<0?"Right":"")}),i},In.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Zn(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n!=w;In.prototype[e]=function(e,t){var i=this.clone();return i.__iteratees__.push({iteratee:Ui(e,t,1),type:n}),i.__filtered__=i.__filtered__||r,i}}),Zn(["first","last"],function(e,t){var n="take"+(t?"Right":"");In.prototype[e]=function(){return this[n](1).value()[0]}}),Zn(["initial","rest"],function(e,t){var n="drop"+(t?"":"Right");In.prototype[e]=function(){return this.__filtered__?new In(this):this[n](1)}}),Zn(["pluck","where"],function(e,t){var n=t?"filter":"map",r=t?qr:Ja;In.prototype[e]=function(e){return this[n](r(e))}}),In.prototype.compact=function(){return this.filter(qa)},In.prototype.reject=function(e,t){return e=Ui(e,t,1),this.filter(function(t){return!e(t)})},In.prototype.slice=function(e,t){e=e==null?0:+e||0;var n=this;return n.__filtered__&&(e>0||t<0)?new In(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==r&&(t=+t||0,n=t<0?n.dropRight(-t):n.take(t-e)),n)},In.prototype.takeRightWhile=function(e,t){return this.reverse().takeWhile(e,t).reverse()},In.prototype.toArray=function(){return this.take(Ln)},_r(In.prototype,function(e,t){var n=/^(?:filter|map|reject)|While$/.test(t),i=/^(?:first|last)$/.test(t),s=Hn[i?"take"+(t=="last"?"Right":""):t];if(!s)return;Hn.prototype[t]=function(){var t=i?[1]:arguments,o=this.__chain__,u=this.__wrapped__,a=!!this.__actions__.length,f=u instanceof In,l=t[0],c=f||mu(u);c&&n&&typeof l=="function"&&l.length!=1&&(f=c=!1);var h=function(e){return i&&o?s(e,1)[0]:s.apply(r,sr([e],t))},p={func:io,args:[h],thisArg:r},d=f&&!a;if(i&&!o)return d?(u=u.clone(),u.__actions__.push(p),e.call(u)):s.call(r,this.value())[0];if(!i&&c){u=d?u:new In(this);var v=e.apply(u,t);return v.__actions__.push(p),new jn(v,o)}return this.thru(h)}}),Zn(["join","pop","push","replace","shift","sort","splice","split","unshift"],function(e){var t=(/^(?:replace|split)$/.test(e)?At:kt)[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:join|pop|replace|shift)$/.test(e);Hn.prototype[e]=function(){var e=arguments;return r&&!this.__chain__?t.apply(this.value(),e):this[n](function(n){return t.apply(n,e)})}}),_r(In.prototype,function(e,t){var n=Hn[t];if(n){var r=n.name,i=Pn[r]||(Pn[r]=[]);i.push({name:t,func:n})}}),Pn[Di(r,o).name]=[{name:"wrapper",func:r}],In.prototype.clone=qn,In.prototype.reverse=Rn,In.prototype.value=Un,Hn.prototype.chain=so,Hn.prototype.commit=oo,Hn.prototype.concat=uo,Hn.prototype.plant=ao,Hn.prototype.reverse=fo,Hn.prototype.toString=lo,Hn.prototype.run=Hn.prototype.toJSON=Hn.prototype.valueOf=Hn.prototype.value=co,Hn.prototype.collect=Hn.prototype.map,Hn.prototype.head=Hn.prototype.first,Hn.prototype.select=Hn.prototype.filter,Hn.prototype.tail=Hn.prototype.rest,Hn}var r,i="3.10.1",s=1,o=2,u=4,a=8,f=16,l=32,c=64,h=128,p=256,d=30,v="...",m=150,g=16,y=200,b=1,w=2,E="Expected a function",S="__lodash_placeholder__",x="[object Arguments]",T="[object Array]",N="[object Boolean]",C="[object Date]",k="[object Error]",L="[object Function]",A="[object Map]",O="[object Number]",M="[object Object]",_="[object RegExp]",D="[object Set]",P="[object String]",H="[object WeakMap]",B="[object ArrayBuffer]",j="[object Float32Array]",F="[object Float64Array]",I="[object Int8Array]",q="[object Int16Array]",R="[object Int32Array]",U="[object Uint8Array]",z="[object Uint8ClampedArray]",W="[object Uint16Array]",X="[object Uint32Array]",V=/\b__p \+= '';/g,$=/\b(__p \+=) '' \+/g,J=/(__e\(.*?\)|\b__t\)) \+\n'';/g,K=/&(?:amp|lt|gt|quot|#39|#96);/g,Q=/[&<>"'`]/g,G=RegExp(K.source),Y=RegExp(Q.source),Z=/<%-([\s\S]+?)%>/g,et=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,nt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,rt=/^\w*$/,it=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,st=/^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,ot=RegExp(st.source),ut=/[\u0300-\u036f\ufe20-\ufe23]/g,at=/\\(\\)?/g,ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,lt=/\w*$/,ct=/^0[xX]/,ht=/^\[object .+?Constructor\]$/,pt=/^\d+$/,dt=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,vt=/($^)/,mt=/['\n\r\u2028\u2029\\]/g,gt=function(){var e="[A-Z\\xc0-\\xd6\\xd8-\\xde]",t="[a-z\\xdf-\\xf6\\xf8-\\xff]+";return RegExp(e+"+(?="+e+t+")|"+e+"?"+t+"|"+e+"+|[0-9]+","g")}(),yt=["Array","ArrayBuffer","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Math","Number","Object","RegExp","Set","String","_","clearTimeout","isFinite","parseFloat","parseInt","setTimeout","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap"],bt=-1,wt={};wt[j]=wt[F]=wt[I]=wt[q]=wt[R]=wt[U]=wt[z]=wt[W]=wt[X]=!0,wt[x]=wt[T]=wt[B]=wt[N]=wt[C]=wt[k]=wt[L]=wt[A]=wt[O]=wt[M]=wt[_]=wt[D]=wt[P]=wt[H]=!1;var Et={};Et[x]=Et[T]=Et[B]=Et[N]=Et[C]=Et[j]=Et[F]=Et[I]=Et[q]=Et[R]=Et[O]=Et[M]=Et[_]=Et[P]=Et[U]=Et[z]=Et[W]=Et[X]=!0,Et[k]=Et[L]=Et[A]=Et[D]=Et[H]=!1;var St={"\u00c0":"A","\u00c1":"A","\u00c2":"A","\u00c3":"A","\u00c4":"A","\u00c5":"A","\u00e0":"a","\u00e1":"a","\u00e2":"a","\u00e3":"a","\u00e4":"a","\u00e5":"a","\u00c7":"C","\u00e7":"c","\u00d0":"D","\u00f0":"d","\u00c8":"E","\u00c9":"E","\u00ca":"E","\u00cb":"E","\u00e8":"e","\u00e9":"e","\u00ea":"e","\u00eb":"e","\u00cc":"I","\u00cd":"I","\u00ce":"I","\u00cf":"I","\u00ec":"i","\u00ed":"i","\u00ee":"i","\u00ef":"i","\u00d1":"N","\u00f1":"n","\u00d2":"O","\u00d3":"O","\u00d4":"O","\u00d5":"O","\u00d6":"O","\u00d8":"O","\u00f2":"o","\u00f3":"o","\u00f4":"o","\u00f5":"o","\u00f6":"o","\u00f8":"o","\u00d9":"U","\u00da":"U","\u00db":"U","\u00dc":"U","\u00f9":"u","\u00fa":"u","\u00fb":"u","\u00fc":"u","\u00dd":"Y","\u00fd":"y","\u00ff":"y","\u00c6":"Ae","\u00e6":"ae","\u00de":"Th","\u00fe":"th","\u00df":"ss"},xt={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Tt={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Nt={"function":!0,object:!0},Ct={0:"x30",1:"x31",2:"x32",3:"x33",4:"x34",5:"x35",6:"x36",7:"x37",8:"x38",9:"x39",A:"x41",B:"x42",C:"x43",D:"x44",E:"x45",F:"x46",a:"x61",b:"x62",c:"x63",d:"x64",e:"x65",f:"x66",n:"x6e",r:"x72",t:"x74",u:"x75",v:"x76",x:"x78"},kt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Lt=Nt[typeof n]&&n&&!n.nodeType&&n,At=Nt[typeof t]&&t&&!t.nodeType&&t,Ot=Lt&&At&&typeof e=="object"&&e&&e.Object&&e,Mt=Nt[typeof self]&&self&&self.Object&&self,_t=Nt[typeof window]&&window&&window.Object&&window,Dt=At&&At.exports===Lt&&Lt,Pt=Ot||_t!==(this&&this.window)&&_t||Mt||this,rn=nn();typeof define=="function"&&typeof define.amd=="object"&&define.amd?(Pt._=rn,define(function(){return rn})):Lt&&At?Dt?(At.exports=rn)._=rn:Lt._=rn:Pt._=rn}).call(this)}).call(this,typeof global!="undefined"?global:typeof self!="undefined"?self:typeof window!="undefined"?window:{})},{}]},{},["/node_modules/xqlint/lib/xqlint.js"])}),define("ace/mode/xquery_worker",[],function(e,t,n){"use strict";var r=e("../lib/oop"),i=e("../worker/mirror").Mirror,s=e("./xquery/xqlint"),o=s.XQLint,u=function(e){return function(t){var n=e,r=n[t],i={},s={};return r.functions.forEach(function(e){s[t+"#"+e.name+"#"+e.arity]={params:[]},e.parameters.forEach(function(n){s[t+"#"+e.name+"#"+e.arity].params.push("$"+n.name)})}),r.variables.forEach(function(e){var n=e.name.substring(e.name.indexOf(":")+1);i[t+"#"+n]={type:"VarDecl",annotations:[]}}),{variables:i,functions:s}}},a=t.XQueryWorker=function(e){i.call(this,e),this.setTimeout(200);var t=this;this.sender.on("complete",function(e){if(t.xqlint){var n={line:e.data.pos.row,col:e.data.pos.column},r=t.xqlint.getCompletions(n);t.sender.emit("complete",r)}}),this.sender.on("setAvailableModuleNamespaces",function(e){t.availableModuleNamespaces=e.data}),this.sender.on("setFileName",function(e){t.fileName=e.data}),this.sender.on("setModuleResolver",function(e){t.moduleResolver=u(e.data)})};r.inherits(a,i),function(){this.onUpdate=function(){this.sender.emit("start");var e=this.doc.getValue(),t=s.createStaticContext();this.moduleResolver&&t.setModuleResolver(this.moduleResolver),this.availableModuleNamespaces&&(t.availableModuleNamespaces=this.availableModuleNamespaces);var n={styleCheck:this.styleCheck,staticContext:t,fileName:this.fileName};this.xqlint=new o(e,n),this.sender.emit("markers",this.xqlint.getMarkers())}}.call(a.prototype)})                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  decimal: new TokenType(\"decimal\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: new TokenType(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        // TrailingComments maybe contain innerComments\n        const firstTrailingCommentIndex = trailingComments.findIndex(\n          comment => comment.end >= node.end,\n        );\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(\n            0,\n            firstTrailingCommentIndex,\n          );\n          node.trailingComments = trailingComments.slice(\n            firstTrailingCommentIndex,\n          );\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString:\n    \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString:\n    'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys:\n    'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate:\n    \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn:\n    \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldI